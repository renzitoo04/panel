<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Campa√±as - ROAS y M√©tricas</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
</head>
<body>
    <!-- SIDEBAR LATERAL PLEGABLE -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h3>Navegaci√≥n</h3>
            <button class="sidebar-toggle" onclick="toggleSidebar()">
                <span class="toggle-icon">‚óÄ</span>
            </button>
        </div>

        <div class="sidebar-menu">
            <a href="/" class="menu-item">
                <span class="menu-icon">üìä</span>
                <span class="menu-text">Dashboard</span>
            </a>
            <a href="/campaigns" class="menu-item active">
                <span class="menu-icon">üí∞</span>
                <span class="menu-text">Campa√±as</span>
            </a>
            <a href="/finanzas" class="menu-item">
                <span class="menu-icon">üíµ</span>
                <span class="menu-text">Finanzas</span>
            </a>
            <a href="/numeros" class="menu-item">
                <span class="menu-icon">üì±</span>
                <span class="menu-text">N√∫meros</span>
            </a>
            <a href="/settings" class="menu-item">
                <span class="menu-icon">‚öôÔ∏è</span>
                <span class="menu-text">Configuraci√≥n</span>
            </a>
        </div>
    </div>

    <!-- BOT√ìN FLOTANTE PARA ABRIR SIDEBAR (cuando est√° cerrado) -->
    <button class="sidebar-floating-btn" id="sidebarFloatingBtn" onclick="toggleSidebar()">
        <span>‚ñ∂</span>
    </button>

    <div class="main-content" id="mainContent">
        <div class="container">
        <header class="header">
            <div class="header-content">
                <div class="header-title">
                    <h1>üí∞ Campa√±as y ROAS</h1>
                    <p class="subtitle">An√°lisis de rendimiento por campa√±a publicitaria</p>
                </div>
                <div style="display: flex; align-items: center; gap: 20px;">
                    <!-- Indicador de √∫ltima actualizaci√≥n -->
                    <div id="lastUpdateIndicator" style="display: flex; align-items: center; gap: 10px; padding: 10px 15px; background: rgba(59, 130, 246, 0.1); border: 1px solid rgba(59, 130, 246, 0.3); border-radius: 8px;">
                        <div style="display: flex; align-items: center; gap: 6px;">
                            <span id="liveIndicator" style="width: 8px; height: 8px; background: #10b981; border-radius: 50%; animation: pulse-dot 2s infinite;"></span>
                            <span style="font-size: 12px; font-weight: 600; color: #10b981;">EN VIVO</span>
                        </div>
                        <div style="border-left: 1px solid rgba(255,255,255,0.2); height: 20px;"></div>
                        <div style="font-size: 12px; opacity: 0.8;">
                            <div style="font-weight: 500;">√öltima actualizaci√≥n:</div>
                            <div id="lastUpdateTime" style="font-weight: bold; color: #3b82f6;">Ahora mismo</div>
                        </div>
                        <div style="border-left: 1px solid rgba(255,255,255,0.2); height: 20px;"></div>
                        <div style="font-size: 12px; opacity: 0.8;">
                            <div style="font-weight: 500;">Pr√≥xima en:</div>
                            <div id="nextUpdateCountdown" style="font-weight: bold; color: #f59e0b;">5:00</div>
                        </div>
                        <div style="border-left: 1px solid rgba(255,255,255,0.2); height: 20px;"></div>
                        <button onclick="manualRefresh()" id="manualRefreshBtn" style="background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); border: none; color: white; padding: 8px 16px; border-radius: 6px; font-size: 12px; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 6px; transition: all 0.2s;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                            <span id="refreshIcon">üîÑ</span>
                            <span>Actualizar</span>
                        </button>
                    </div>

                    <div class="landing-selector">
                        <label for="landingSelect">Landing Page:</label>
                        <select id="landingSelect" class="landing-select" onchange="switchLanding(this.value)">
                            <option value="default">Cargando...</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Animaci√≥n del indicador -->
            <style>
                @keyframes pulse-dot {
                    0%, 100% {
                        transform: scale(1);
                        opacity: 1;
                        box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
                    }
                    50% {
                        transform: scale(1.1);
                        opacity: 0.8;
                        box-shadow: 0 0 0 4px rgba(16, 185, 129, 0);
                    }
                }
            </style>
        </header>

        <!-- FILTROS Y ORDENAMIENTO -->
        <section class="conversion-metrics">
            <h2>üîç Filtros y Ordenamiento</h2>
            <div class="filters-container">
                <div class="filter-group">
                    <label for="dateFilter">Rango de fechas:</label>
                    <select id="dateFilter" onchange="applyFilters()">
                        <option value="all">Todos los tiempos</option>
                        <option value="7">√öltimos 7 d√≠as</option>
                        <option value="30" selected>√öltimos 30 d√≠as</option>
                        <option value="90">√öltimos 90 d√≠as</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="roasFilter">ROAS m√≠nimo:</label>
                    <select id="roasFilter" onchange="applyFilters()">
                        <option value="0">Todos</option>
                        <option value="1">ROAS ‚â• 1</option>
                        <option value="2">ROAS ‚â• 2</option>
                        <option value="3">ROAS ‚â• 3</option>
                        <option value="4">ROAS ‚â• 4</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label for="sortBy">Ordenar por:</label>
                    <select id="sortBy" onchange="applyFilters()">
                        <option value="roas_desc">ROAS (Mayor a Menor)</option>
                        <option value="roas_asc">ROAS (Menor a Mayor)</option>
                        <option value="revenue_desc">Ingresos (Mayor a Menor)</option>
                        <option value="margin_desc">Margen (Mayor a Menor)</option>
                        <option value="purchases_desc">Compras (Mayor a Menor)</option>
                        <option value="conversion_desc">Tasa Conversi√≥n (Mayor a Menor)</option>
                    </select>
                </div>
            </div>
        </section>

        <!-- ALERTAS DE PRESUPUESTO -->
        <% if (budgetAlerts && budgetAlerts.length > 0) { %>
        <section class="conversion-metrics" style="margin-top: 30px;">
            <h2>‚ö†Ô∏è Alertas de Presupuesto</h2>
            <div class="alerts-container" style="display: grid; gap: 15px;">
                <% budgetAlerts.forEach(alert => { %>
                <div class="alert alert-<%= alert.type %>" style="padding: 15px; border-radius: 8px; background: <%= alert.type === 'danger' ? 'rgba(239, 68, 68, 0.1)' : alert.type === 'warning' ? 'rgba(245, 158, 11, 0.1)' : 'rgba(59, 130, 246, 0.1)' %>; border-left: 4px solid <%= alert.type === 'danger' ? '#ef4444' : alert.type === 'warning' ? '#f59e0b' : '#3b82f6' %>;">
                        <strong><%= alert.campaign %></strong>: <%= alert.message %>
                        <div style="margin-top: 8px; background: rgba(255,255,255,0.1); border-radius: 4px; height: 8px;">
                            <div style="width: <%= alert.percentage %>%; height: 100%; background: <%= alert.type === 'danger' ? '#ef4444' : alert.type === 'warning' ? '#f59e0b' : '#3b82f6' %>; border-radius: 4px;"></div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </section>
        <% } %>

        <!-- RECOMENDACIONES AUTOM√ÅTICAS -->
        <% if (recommendations && recommendations.length > 0) { %>
        <section class="conversion-metrics" style="margin-top: 30px;">
            <h2>üí° Recomendaciones Autom√°ticas</h2>
            <div class="recommendations-container" style="display: grid; gap: 15px;">
                <% recommendations.forEach(rec => { %>
                <div class="recommendation recommendation-<%= rec.type %>" style="padding: 15px; border-radius: 8px; background: <%= rec.type === 'success' ? 'rgba(34, 197, 94, 0.1)' : rec.type === 'danger' ? 'rgba(239, 68, 68, 0.1)' : rec.type === 'warning' ? 'rgba(245, 158, 11, 0.1)' : 'rgba(59, 130, 246, 0.1)' %>; border-left: 4px solid <%= rec.type === 'success' ? '#22c55e' : rec.type === 'danger' ? '#ef4444' : rec.type === 'warning' ? '#f59e0b' : '#3b82f6' %>;">
                        <div style="display: flex; align-items: start; gap: 12px;">
                            <span style="font-size: 24px;"><%= rec.icon %></span>
                            <div style="flex: 1;">
                                <strong><%= rec.title %></strong>
                                <p style="margin: 5px 0 0 0; opacity: 0.9;"><%= rec.message %></p>
                                <small style="opacity: 0.7;">Campa√±a: <%= rec.campaign %></small>
                            </div>
                            <span class="badge badge-<%= rec.priority %>" style="padding: 4px 8px; border-radius: 4px; font-size: 11px; background: <%= rec.priority === 'high' ? '#ef4444' : rec.priority === 'medium' ? '#f59e0b' : '#3b82f6' %>;">
                                <%= rec.priority === 'high' ? 'ALTA' : rec.priority === 'medium' ? 'MEDIA' : 'BAJA' %>
                            </span>
                        </div>
                    </div>
                <% }); %>
            </div>
        </section>
        <% } %>

        <!-- AN√ÅLISIS DE EMBUDO (FUNNEL) MEJORADO -->
        <% if (funnelAnalysis) { %>
        <section class="conversion-metrics" style="margin-top: 30px;">
            <h2 style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; font-size: 24px; font-weight: bold; margin-bottom: 20px;">
                üîÑ An√°lisis de Embudo de Conversi√≥n
            </h2>

            <!-- KPIs Principales -->
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px;">
                <div style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.15) 0%, rgba(37, 99, 235, 0.05) 100%); border: 2px solid rgba(59, 130, 246, 0.3); border-radius: 12px; padding: 20px; position: relative; overflow: hidden;">
                    <div style="position: absolute; top: 10px; right: 10px; font-size: 40px; opacity: 0.15;">üì±</div>
                    <div style="font-size: 14px; opacity: 0.8; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 8px;">Clicks WhatsApp</div>
                    <div style="font-size: 36px; font-weight: bold; color: #3b82f6; margin-bottom: 5px;"><%= funnelAnalysis.summary.total_clicks %></div>
                    <div style="font-size: 12px; opacity: 0.6;">üë• Usuarios que hicieron click</div>
                </div>

                <div style="background: linear-gradient(135deg, rgba(16, 185, 129, 0.15) 0%, rgba(5, 150, 105, 0.05) 100%); border: 2px solid rgba(16, 185, 129, 0.3); border-radius: 12px; padding: 20px; position: relative; overflow: hidden;">
                    <div style="position: absolute; top: 10px; right: 10px; font-size: 40px; opacity: 0.15;">üí¨</div>
                    <div style="font-size: 14px; opacity: 0.8; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 8px;">Mensajes</div>
                    <div style="font-size: 36px; font-weight: bold; color: #10b981; margin-bottom: 5px;"><%= funnelAnalysis.summary.total_messages %></div>
                    <div style="display: flex; align-items: center; gap: 8px; font-size: 14px;">
                        <span style="background: rgba(16, 185, 129, 0.2); padding: 3px 8px; border-radius: 4px; font-weight: bold; color: #10b981;"><%= funnelAnalysis.summary.click_to_message_rate %>%</span>
                        <span style="opacity: 0.6;">de conversi√≥n</span>
                    </div>
                </div>

                <div style="background: linear-gradient(135deg, rgba(245, 158, 11, 0.15) 0%, rgba(217, 119, 6, 0.05) 100%); border: 2px solid rgba(245, 158, 11, 0.3); border-radius: 12px; padding: 20px; position: relative; overflow: hidden;">
                    <div style="position: absolute; top: 10px; right: 10px; font-size: 40px; opacity: 0.15;">üí∞</div>
                    <div style="font-size: 14px; opacity: 0.8; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 8px;">Compras</div>
                    <div style="font-size: 36px; font-weight: bold; color: #f59e0b; margin-bottom: 5px;"><%= funnelAnalysis.summary.total_purchases %></div>
                    <div style="display: flex; align-items: center; gap: 8px; font-size: 14px;">
                        <span style="background: rgba(245, 158, 11, 0.2); padding: 3px 8px; border-radius: 4px; font-weight: bold; color: #f59e0b;"><%= funnelAnalysis.summary.overall_conversion %>%</span>
                        <span style="opacity: 0.6;">conversi√≥n total</span>
                    </div>
                </div>
            </div>

            <!-- Embudo Visual Mejorado -->
            <div style="background: linear-gradient(135deg, rgba(255,255,255,0.08) 0%, rgba(255,255,255,0.02) 100%); border: 1px solid rgba(255,255,255,0.1); padding: 30px; border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.3);">
                <h3 style="text-align: center; margin-bottom: 30px; font-size: 18px; opacity: 0.9;">üìä Flujo de Conversi√≥n Detallado</h3>

                <div style="display: grid; grid-template-columns: 1fr 80px 1fr 80px 1fr; gap: 0; align-items: center; max-width: 1200px; margin: 0 auto;">
                    <% funnelAnalysis.steps.forEach((step, index) => {
                        const stepColors = [
                            { from: '#3b82f6', to: '#2563eb', icon: 'üì±', label: 'Inicio' },
                            { from: '#10b981', to: '#059669', icon: 'üí¨', label: 'Inter√©s' },
                            { from: '#f59e0b', to: '#d97706', icon: 'üí∞', label: 'Conversi√≥n' }
                        ];
                        const color = stepColors[index];
                    %>

                    <!-- Paso del Embudo -->
                    <div style="position: relative;">
                        <!-- Barra de Progreso -->
                        <div style="background: rgba(255,255,255,0.05); height: 120px; border-radius: 12px; overflow: hidden; position: relative;">
                            <div style="background: linear-gradient(180deg, <%= color.from %> 0%, <%= color.to %> 100%); height: 100%; width: <%= step.percentage %>%; transition: width 1s ease; display: flex; align-items: center; justify-content: center; position: relative;">
                                <!-- Contenido de la barra -->
                                <div style="position: absolute; left: 15px; top: 50%; transform: translateY(-50%); z-index: 2;">
                                    <div style="font-size: 32px; margin-bottom: 5px;"><%= color.icon %></div>
                                    <div style="font-size: 24px; font-weight: bold; text-shadow: 0 2px 4px rgba(0,0,0,0.3);"><%= step.count %></div>
                                </div>

                                <!-- Brillo animado -->
                                <div style="position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent); animation: shimmer 2s infinite;"></div>
                            </div>

                            <!-- Porcentaje fuera de la barra -->
                            <div style="position: absolute; right: 15px; top: 50%; transform: translateY(-50%); z-index: 3;">
                                <div style="font-size: 22px; font-weight: bold; color: <%= color.from %>; text-shadow: 0 2px 8px rgba(0,0,0,0.5);"><%= step.percentage %>%</div>
                            </div>
                        </div>

                        <!-- Label del paso -->
                        <div style="text-align: center; margin-top: 12px; font-size: 13px; font-weight: 600; opacity: 0.8;"><%= step.name %></div>
                        <div style="text-align: center; margin-top: 4px; font-size: 11px; opacity: 0.5; text-transform: uppercase; letter-spacing: 0.5px;"><%= color.label %></div>

                        <!-- Badge de abandono -->
                        <% if (step.drop_rate > 0) { %>
                        <div style="position: absolute; top: -15px; right: 10px; background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%); padding: 6px 12px; border-radius: 20px; font-size: 11px; font-weight: bold; box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4); animation: pulse 2s infinite;">
                            ‚ö†Ô∏è <%= step.drop_rate %>% abandono
                        </div>
                        <% } %>
                    </div>

                    <!-- Flecha de transici√≥n -->
                    <% if (index < funnelAnalysis.steps.length - 1) { %>
                    <div style="text-align: center; padding: 0 10px;">
                        <div style="font-size: 36px; opacity: 0.3; animation: bounceRight 1s infinite;">‚Üí</div>
                        <%
                        const nextStep = funnelAnalysis.steps[index + 1];
                        const conversionRate = step.count > 0 ? ((nextStep.count / step.count) * 100).toFixed(1) : 0;
                        %>
                        <div style="font-size: 12px; font-weight: bold; color: <%= conversionRate >= 50 ? '#10b981' : conversionRate >= 30 ? '#f59e0b' : '#ef4444' %>; margin-top: 8px;">
                            <%= conversionRate %>%
                        </div>
                    </div>
                    <% } %>

                    <% }); %>
                </div>

                <!-- Insights autom√°ticos -->
                <div style="margin-top: 30px; padding: 20px; background: rgba(0,0,0,0.3); border-radius: 12px; border-left: 4px solid #8b5cf6;">
                    <div style="font-weight: bold; margin-bottom: 10px; color: #a78bfa;">üí° Insights Autom√°ticos:</div>
                    <div style="display: grid; gap: 8px; font-size: 14px;">
                        <%
                        const clickToMsg = parseFloat(funnelAnalysis.summary.click_to_message_rate);
                        const msgToPurchase = parseFloat(funnelAnalysis.summary.message_to_purchase_rate);
                        %>

                        <% if (clickToMsg < 30) { %>
                        <div style="opacity: 0.9;">üî¥ <strong>Problema detectado:</strong> Solo <%= clickToMsg %>% de los clicks env√≠an mensaje. Optimiza el copy de la landing o la oferta inicial.</div>
                        <% } else if (clickToMsg < 50) { %>
                        <div style="opacity: 0.9;">üü° <strong>Oportunidad:</strong> <%= clickToMsg %>% de conversi√≥n a mensaje es aceptable, pero hay espacio para mejorar.</div>
                        <% } else { %>
                        <div style="opacity: 0.9;">üü¢ <strong>Excelente:</strong> <%= clickToMsg %>% de los clicks env√≠an mensaje. ¬°Tr√°fico de calidad!</div>
                        <% } %>

                        <% if (msgToPurchase < 20 && funnelAnalysis.summary.total_messages > 0) { %>
                        <div style="opacity: 0.9;">üî¥ <strong>Fuga cr√≠tica:</strong> Solo <%= msgToPurchase %>% de mensajes cierra. Revisa el script de ventas y el proceso de atenci√≥n.</div>
                        <% } else if (msgToPurchase < 40 && funnelAnalysis.summary.total_messages > 0) { %>
                        <div style="opacity: 0.9;">üü° <strong>Mejorable:</strong> <%= msgToPurchase %>% de cierre. Capacita al equipo de ventas o automatiza seguimiento.</div>
                        <% } else if (funnelAnalysis.summary.total_messages > 0) { %>
                        <div style="opacity: 0.9;">üü¢ <strong>Fant√°stico:</strong> <%= msgToPurchase %>% de cierre. ¬°Equipo de ventas efectivo!</div>
                        <% } %>

                        <% if (funnelAnalysis.summary.total_purchases === 0 && funnelAnalysis.summary.total_clicks > 10) { %>
                        <div style="opacity: 0.9;">‚ö†Ô∏è <strong>Alerta:</strong> <%= funnelAnalysis.summary.total_clicks %> clicks pero 0 compras. Revisa urgentemente el proceso completo.</div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Animaciones CSS -->
            <style>
                @keyframes shimmer {
                    0% { left: -100%; }
                    100% { left: 100%; }
                }

                @keyframes pulse {
                    0%, 100% { transform: scale(1); opacity: 1; }
                    50% { transform: scale(1.05); opacity: 0.9; }
                }

                @keyframes bounceRight {
                    0%, 100% { transform: translateX(0); }
                    50% { transform: translateX(5px); }
                }
            </style>
        </section>
        <% } %>

        <!-- GR√ÅFICOS -->
        <section class="chart-section">
            <div class="section-header">
                <h2>üìä Gr√°ficos de Rendimiento</h2>
                <div class="filter-group">
                    <label for="chartCampaign">Campa√±a:</label>
                    <select id="chartCampaign" onchange="updateCharts()">
                        <option value="all">Todas las campa√±as</option>
                        <% Object.values(campaignStats).forEach(campaign => { %>
                            <option value="<%= campaign.name %>"><%= campaign.name %></option>
                        <% }); %>
                    </select>
                </div>
            </div>

            <!-- Grid de gr√°ficos -->
            <div class="stats-grid">
                <div class="stat-card" style="grid-column: span 2;">
                    <h3 style="margin-bottom: 20px;">üìà Evoluci√≥n Temporal</h3>
                    <div style="position: relative; height: 300px;">
                        <canvas id="timelineChart"></canvas>
                    </div>
                </div>
                <div class="stat-card">
                    <h3 style="margin-bottom: 20px;">üí∞ ROAS por Campa√±a</h3>
                    <div style="position: relative; height: 300px;">
                        <canvas id="roasComparisonChart"></canvas>
                    </div>
                </div>
                <div class="stat-card">
                    <h3 style="margin-bottom: 20px;">üíµ Distribuci√≥n de Gastos</h3>
                    <div style="position: relative; height: 300px;">
                        <canvas id="spendDistributionChart"></canvas>
                    </div>
                </div>
            </div>
        </section>

        <!-- ROAS POR CAMPA√ëA -->
        <section class="campaign-roas-section">
            <div class="section-header">
                <h2>üí∞ ROAS por Campa√±a</h2>
                <button onclick="openSpendModal()" class="btn btn-primary">Establecer gastos</button>
            </div>

            <div class="campaign-roas-grid">
                <%
                const campaigns = Object.values(campaignStats);
                if (campaigns.length === 0) { %>
                    <div class="empty-state">
                        <p>No hay datos de campa√±as disponibles</p>
                        <p class="subtitle">Las campa√±as aparecer√°n aqu√≠ cuando haya eventos con par√°metros UTM</p>
                    </div>
                <% } else {
                    campaigns.forEach(campaign => {
                        const roasClass = parseFloat(campaign.roas) >= 2 ? 'roas-good' : parseFloat(campaign.roas) >= 1 ? 'roas-ok' : 'roas-bad';
                %>
                    <div class="campaign-card <%= roasClass %>-border">
                        <div class="campaign-header">
                            <h3 class="campaign-name"><%= campaign.name %></h3>
                            <span class="campaign-roas <%= roasClass %>">
                                ROAS: <%= campaign.roas %>x
                            </span>
                        </div>

                        <!-- M√âTRICAS CLAVE TIER 1 -->
                        <div class="tier1-metrics">
                            <div class="tier1-metric">
                                <span class="tier1-label">CPL</span>
                                <span class="tier1-value">$<%= campaign.cpl %></span>
                                <span class="tier1-sublabel">Costo por Lead</span>
                            </div>
                            <div class="tier1-metric">
                                <span class="tier1-label">CPA</span>
                                <span class="tier1-value">$<%= campaign.cpa %></span>
                                <span class="tier1-sublabel">Costo por Cliente</span>
                            </div>
                            <div class="tier1-metric <%= parseFloat(campaign.margin) > 0 ? 'positive' : 'negative' %>">
                                <span class="tier1-label">Margen</span>
                                <span class="tier1-value">$<%= campaign.margin %></span>
                                <span class="tier1-sublabel">Ganancia Real</span>
                            </div>
                            <div class="tier1-metric">
                                <span class="tier1-label">Cierre</span>
                                <span class="tier1-value"><%= campaign.closeRate %>%</span>
                                <span class="tier1-sublabel">Tasa Conversi√≥n</span>
                            </div>
                        </div>

                        <!-- M√âTRICAS AVANZADAS TIER 2 -->
                        <div class="tier1-metrics" style="margin-top: 15px;">
                            <div class="tier1-metric">
                                <span class="tier1-label">AOV</span>
                                <span class="tier1-value">$<%= campaign.aov %></span>
                                <span class="tier1-sublabel">Valor Promedio</span>
                            </div>
                            <div class="tier1-metric">
                                <span class="tier1-label">‚è±Ô∏è Tiempo</span>
                                <span class="tier1-value"><%= campaign.avgTimeToConversion %>h</span>
                                <span class="tier1-sublabel">Hasta Conversi√≥n</span>
                            </div>
                            <div class="tier1-metric">
                                <span class="tier1-label">üë• Usuarios</span>
                                <span class="tier1-value"><%= campaign.uniqueUsers %></span>
                                <span class="tier1-sublabel">√önicos</span>
                            </div>
                            <div class="tier1-metric">
                                <span class="tier1-label">üîÑ Retenci√≥n</span>
                                <span class="tier1-value"><%= campaign.retentionRate %>%</span>
                                <span class="tier1-sublabel">Clientes Recurrentes</span>
                            </div>
                        </div>

                        <!-- AN√ÅLISIS DE EMBUDO (FUNNEL) -->
                        <div class="funnel-container" style="margin-top: 20px; padding: 15px; background: rgba(0,0,0,0.2); border-radius: 12px;">
                            <h4 style="margin-bottom: 15px; color: var(--text-primary); font-size: 1.1rem;">üìä Embudo de Conversi√≥n</h4>
                            <div class="funnel-steps">
                                <div class="funnel-step">
                                    <div class="funnel-label">Clicks</div>
                                    <div class="funnel-value"><%= campaign.clicks %></div>
                                    <div class="funnel-bar" style="width: 100%; background: #3b82f6;"></div>
                                </div>
                                <div class="funnel-arrow">‚Üì <%= campaign.clicks > 0 ? ((campaign.messages / campaign.clicks) * 100).toFixed(1) : 0 %>%</div>
                                <div class="funnel-step">
                                    <div class="funnel-label">Mensajes</div>
                                    <div class="funnel-value"><%= campaign.messages %></div>
                                    <div class="funnel-bar" style="width: <%= campaign.clicks > 0 ? (campaign.messages / campaign.clicks * 100) : 0 %>%; background: #f59e0b;"></div>
                                </div>
                                <div class="funnel-arrow">‚Üì <%= campaign.messages > 0 ? ((campaign.purchases / campaign.messages) * 100).toFixed(1) : 0 %>%</div>
                                <div class="funnel-step">
                                    <div class="funnel-label">Compras</div>
                                    <div class="funnel-value"><%= campaign.purchases %></div>
                                    <div class="funnel-bar" style="width: <%= campaign.clicks > 0 ? (campaign.purchases / campaign.clicks * 100) : 0 %>%; background: #10b981;"></div>
                                </div>
                            </div>
                        </div>

                        <!-- M√âTRICAS DETALLADAS -->
                        <div class="campaign-stats">
                            <div class="campaign-stat">
                                <span class="stat-label">Clicks:</span>
                                <span class="stat-value"><%= campaign.clicks %></span>
                            </div>
                            <div class="campaign-stat">
                                <span class="stat-label">Mensajes:</span>
                                <span class="stat-value"><%= campaign.messages %></span>
                            </div>
                            <div class="campaign-stat">
                                <span class="stat-label">Compras:</span>
                                <span class="stat-value"><%= campaign.purchases %></span>
                            </div>
                            <div class="campaign-stat">
                                <span class="stat-label">Ingresos:</span>
                                <span class="stat-value">$<%= campaign.revenue.toFixed(2) %></span>
                            </div>
                            <div class="campaign-stat">
                                <span class="stat-label">Gasto:</span>
                                <span class="stat-value">$<%= campaign.spend.toFixed(2) %></span>
                            </div>
                        </div>

                        <!-- BENCHMARKS Y OBJETIVOS -->
                        <% if (campaignBenchmarks && campaignBenchmarks[campaign.name]) { %>
                        <div class="benchmarks-container" style="margin-top: 20px; padding: 15px; background: rgba(0,0,0,0.2); border-radius: 12px;">
                            <h4 style="margin-bottom: 15px; color: var(--text-primary); font-size: 1.1rem;">üéØ Benchmarks</h4>
                            <div style="display: grid; gap: 10px;">
                                <%
                                const benchmarks = campaignBenchmarks[campaign.name];
                                const getStatusColor = (status) => {
                                    return status === 'excellent' ? '#22c55e' :
                                           status === 'good' ? '#10b981' :
                                           status === 'acceptable' ? '#f59e0b' : '#ef4444';
                                };
                                const getStatusIcon = (status) => {
                                    return status === 'excellent' ? 'üü¢' :
                                           status === 'good' ? 'üü°' :
                                           status === 'acceptable' ? 'üü†' : 'üî¥';
                                };
                                %>

                                <!-- ROAS Benchmark -->
                                <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                                    <span style="font-weight: 500;">ROAS</span>
                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        <span style="color: <%= getStatusColor(benchmarks.roas.status) %>; font-weight: bold;"><%= benchmarks.roas.value %>x</span>
                                        <span style="font-size: 20px;"><%= getStatusIcon(benchmarks.roas.status) %></span>
                                    </div>
                                </div>

                                <!-- Close Rate Benchmark -->
                                <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                                    <span style="font-weight: 500;">Tasa de Cierre</span>
                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        <span style="color: <%= getStatusColor(benchmarks.closeRate.status) %>; font-weight: bold;"><%= benchmarks.closeRate.value %>%</span>
                                        <span style="font-size: 20px;"><%= getStatusIcon(benchmarks.closeRate.status) %></span>
                                    </div>
                                </div>

                                <!-- CPA Benchmark -->
                                <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px; background: rgba(255,255,255,0.05); border-radius: 6px;">
                                    <span style="font-weight: 500;">CPA</span>
                                    <div style="display: flex; align-items: center; gap: 10px;">
                                        <span style="color: <%= getStatusColor(benchmarks.cpa.status) %>; font-weight: bold;">$<%= benchmarks.cpa.value %></span>
                                        <span style="font-size: 20px;"><%= getStatusIcon(benchmarks.cpa.status) %></span>
                                    </div>
                                </div>
                            </div>
                            <div style="margin-top: 10px; font-size: 12px; opacity: 0.7; text-align: center;">
                                üü¢ Excelente | üü° Bueno | üü† Aceptable | üî¥ Mejorar
                            </div>
                        </div>
                        <% } %>

                        <!-- SIMULADOR DE ESCALA -->
                        <div class="scale-simulator" style="margin-top: 20px; padding: 15px; background: rgba(0,0,0,0.2); border-radius: 12px;">
                            <h4 style="margin-bottom: 15px; color: var(--text-primary); font-size: 1.1rem;">üìà Simulador de Escala</h4>
                            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px;">
                                <button onclick="simulateScale('<%= campaign.name %>', 1.5)" style="padding: 10px; border-radius: 6px; background: rgba(59, 130, 246, 0.2); border: 1px solid #3b82f6; color: #3b82f6; cursor: pointer; transition: all 0.2s;">
                                    +50% Presupuesto
                                </button>
                                <button onclick="simulateScale('<%= campaign.name %>', 2)" style="padding: 10px; border-radius: 6px; background: rgba(16, 185, 129, 0.2); border: 1px solid #10b981; color: #10b981; cursor: pointer; transition: all 0.2s;">
                                    Duplicar (+100%)
                                </button>
                                <button onclick="simulateScale('<%= campaign.name %>', 3)" style="padding: 10px; border-radius: 6px; background: rgba(245, 158, 11, 0.2); border: 1px solid #f59e0b; color: #f59e0b; cursor: pointer; transition: all 0.2s;">
                                    Triplicar (+200%)
                                </button>
                                <button onclick="simulateScale('<%= campaign.name %>', 5)" style="padding: 10px; border-radius: 6px; background: rgba(168, 85, 247, 0.2); border: 1px solid #a855f7; color: #a855f7; cursor: pointer; transition: all 0.2s;">
                                    5x Presupuesto
                                </button>
                            </div>
                            <div id="scale-result-<%= campaign.name.replace(/[^a-zA-Z0-9]/g, '_') %>" style="margin-top: 15px; display: none; padding: 12px; background: rgba(255,255,255,0.05); border-radius: 6px;"></div>
                        </div>

                        <!-- ALERTA SI ROAS < 1 -->
                        <% if (parseFloat(campaign.roas) < 1 && campaign.spend > 0) { %>
                        <div class="campaign-alert alert-danger">
                            ‚ö†Ô∏è ALERTA: Esta campa√±a est√° perdiendo dinero ($<%= Math.abs(parseFloat(campaign.margin)).toFixed(2) %>)
                        </div>
                        <% } %>

                        <!-- ALERTA SI ROAS > 2 -->
                        <% if (parseFloat(campaign.roas) >= 2) { %>
                        <div class="campaign-alert alert-success">
                            ‚úÖ Excelente rendimiento! Considera escalar esta campa√±a
                        </div>
                        <% } %>
                    </div>
                <% }); } %>
            </div>
        </section>

        <!-- MODAL PARA ESTABLECER GASTOS -->
        <div id="spendModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>üíµ Establecer Gasto de Campa√±a</h3>
                    <span class="close" onclick="closeSpendModal()">&times;</span>
                </div>
                <form id="spendForm" class="modal-form">
                    <div class="form-group">
                        <label for="campaignName">ID de campa√±a:</label>
                        <input type="text" id="campaignName" name="campaign" required placeholder="Ej: 120235401676400062">
                        <small>Usa el ID num√©rico de tu campa√±a de Facebook Ads</small>
                    </div>
                    <div class="form-group">
                        <label for="campaignAmount">Monto gastado (ARS):</label>
                        <input type="number" id="campaignAmount" name="amount" step="0.01" min="0" required placeholder="Ej: 50000.00">
                    </div>
                    <div class="form-actions">
                        <button type="button" onclick="closeSpendModal()" class="btn btn-secondary">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </div>
                </form>
            </div>
        </div>

        </div>
    </div>

    <script>
        // Obtener el landing actual del servidor
        const currentLandingId = '<%= currentLandingId %>';

        // Load landings dynamically
        async function loadLandingSelector() {
            try {
                const response = await fetch('/api/landings');
                const data = await response.json();

                if (data.success && data.landings) {
                    const select = document.getElementById('landingSelect');
                    select.innerHTML = ''; // Clear existing

                    data.landings.forEach(landing => {
                        const option = document.createElement('option');
                        option.value = landing.id;
                        option.textContent = landing.name;
                        // Seleccionar la landing actual
                        if (landing.id === currentLandingId) {
                            option.selected = true;
                        }
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading landings:', error);
            }
        }

        // Call on page load
        loadLandingSelector();

        // Funci√≥n para cambiar de landing
        function switchLanding(landingId) {
            fetch('/api/switch-landing', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ landingId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert('Error al cambiar de landing');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al cambiar de landing');
            });
        }

        // FUNCIONES PARA SIDEBAR
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const floatingBtn = document.getElementById('sidebarFloatingBtn');

            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');

            if (sidebar.classList.contains('collapsed')) {
                floatingBtn.style.display = 'flex';
            } else {
                floatingBtn.style.display = 'none';
            }
        }

        // FUNCIONES PARA MODAL DE GASTOS
        function openSpendModal() {
            document.getElementById('spendModal').style.display = 'flex';
        }

        function closeSpendModal() {
            document.getElementById('spendModal').style.display = 'none';
            document.getElementById('spendForm').reset();
        }

        // Cerrar modal al hacer click fuera de √©l
        window.onclick = function(event) {
            const modal = document.getElementById('spendModal');
            if (event.target === modal) {
                closeSpendModal();
            }
        };

        // Manejar env√≠o de formulario de gastos
        const spendFormElement = document.getElementById('spendForm');
        if (spendFormElement) {
            spendFormElement.addEventListener('submit', async (e) => {
                e.preventDefault();

                const formData = new FormData(e.target);
                const campaign = formData.get('campaign');
                const amount = parseFloat(formData.get('amount'));

                try {
                    const response = await fetch('/api/campaigns/spend', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ campaign, amount })
                    });

                    const data = await response.json();

                    if (data.success) {
                        alert('Gasto de campa√±a guardado correctamente!');
                        closeSpendModal();
                        location.reload(); // Recargar para mostrar datos actualizados
                    } else {
                        alert('Error al guardar: ' + data.error);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error al guardar el gasto de campa√±a');
                }
            });
        }

        // ============================================
        // GR√ÅFICOS CON CHART.JS
        // ============================================

        let timelineChart, roasChart, spendChart;
        const campaigns = <%- JSON.stringify(Object.values(campaignStats)) %>;

        // Inicializar gr√°ficos al cargar la p√°gina
        window.addEventListener('DOMContentLoaded', () => {
            initCharts();
        });

        async function updateCharts() {
            const selectedCampaign = document.getElementById('chartCampaign').value;
            const days = document.getElementById('dateFilter').value;

            // Obtener datos temporales
            const url = `/api/campaigns/timeline?campaignName=${selectedCampaign}${days !== 'all' ? '&days=' + days : ''}`;
            const response = await fetch(url);
            const data = await response.json();
            const timeline = data.timeline;

            // Actualizar gr√°fico de evoluci√≥n temporal
            if (timelineChart) {
                timelineChart.data.labels = timeline.map(d => d.date);
                timelineChart.data.datasets[0].data = timeline.map(d => d.revenue);
                timelineChart.data.datasets[1].data = timeline.map(d => d.spend);
                timelineChart.data.datasets[2].data = timeline.map(d => parseFloat(d.roas) || 0);
                timelineChart.update();
            }

            // Filtrar campa√±as para los gr√°ficos comparativos
            let filteredCampaigns = campaigns;
            if (selectedCampaign !== 'all') {
                filteredCampaigns = campaigns.filter(c => c.name === selectedCampaign);
            }

            // Actualizar gr√°fico de comparaci√≥n ROAS
            if (roasChart) {
                roasChart.data.labels = filteredCampaigns.map(c => c.name);
                roasChart.data.datasets[0].data = filteredCampaigns.map(c => parseFloat(c.roas) || 0);
                roasChart.update();
            }

            // Actualizar gr√°fico de distribuci√≥n de gastos
            if (spendChart) {
                spendChart.data.labels = filteredCampaigns.map(c => c.name);
                spendChart.data.datasets[0].data = filteredCampaigns.map(c => c.spend);
                spendChart.update();
            }
        }

        function initCharts() {
            // Configuraci√≥n de colores
            const colors = {
                blue: 'rgba(59, 130, 246, 1)',
                blueTransparent: 'rgba(59, 130, 246, 0.2)',
                orange: 'rgba(245, 158, 11, 1)',
                orangeTransparent: 'rgba(245, 158, 11, 0.2)',
                purple: 'rgba(139, 92, 246, 1)',
                purpleTransparent: 'rgba(139, 92, 246, 0.2)',
                green: 'rgba(16, 185, 129, 1)',
                greenTransparent: 'rgba(16, 185, 129, 0.2)'
            };

            // Gr√°fico de evoluci√≥n temporal
            const ctx1 = document.getElementById('timelineChart');
            if (ctx1) {
                timelineChart = new Chart(ctx1, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [
                            {
                                label: 'Ingresos ($)',
                                data: [],
                                borderColor: colors.green,
                                backgroundColor: colors.greenTransparent,
                                tension: 0.4,
                                yAxisID: 'y'
                            },
                            {
                                label: 'Gastos ($)',
                                data: [],
                                borderColor: colors.orange,
                                backgroundColor: colors.orangeTransparent,
                                tension: 0.4,
                                yAxisID: 'y'
                            },
                            {
                                label: 'ROAS',
                                data: [],
                                borderColor: colors.purple,
                                backgroundColor: colors.purpleTransparent,
                                tension: 0.4,
                                yAxisID: 'y1'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                        plugins: {
                            legend: {
                                labels: { color: '#f9fafb' }
                            }
                        },
                        scales: {
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                ticks: { color: '#f9fafb' },
                                grid: { color: 'rgba(255,255,255,0.1)' },
                                title: {
                                    display: true,
                                    text: 'Ingresos / Gastos ($)',
                                    color: '#f9fafb'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                ticks: { color: '#f9fafb' },
                                grid: { drawOnChartArea: false },
                                title: {
                                    display: true,
                                    text: 'ROAS (x)',
                                    color: '#f9fafb'
                                }
                            },
                            x: {
                                ticks: { color: '#f9fafb' },
                                grid: { color: 'rgba(255,255,255,0.1)' }
                            }
                        }
                    }
                });
            }

            // Gr√°fico de comparaci√≥n ROAS
            const ctx2 = document.getElementById('roasComparisonChart');
            if (ctx2) {
                roasChart = new Chart(ctx2, {
                    type: 'bar',
                    data: {
                        labels: campaigns.map(c => c.name),
                        datasets: [{
                            label: 'ROAS',
                            data: campaigns.map(c => parseFloat(c.roas) || 0),
                            backgroundColor: campaigns.map(c => {
                                const roas = parseFloat(c.roas);
                                if (roas >= 2) return colors.green;
                                if (roas >= 1) return colors.orange;
                                return 'rgba(239, 68, 68, 1)';
                            })
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { color: '#f9fafb' },
                                grid: { color: 'rgba(255,255,255,0.1)' }
                            },
                            x: {
                                ticks: { color: '#f9fafb' },
                                grid: { color: 'rgba(255,255,255,0.1)' }
                            }
                        }
                    }
                });
            }

            // Gr√°fico de distribuci√≥n de gastos
            const ctx3 = document.getElementById('spendDistributionChart');
            if (ctx3) {
                spendChart = new Chart(ctx3, {
                    type: 'doughnut',
                    data: {
                        labels: campaigns.map(c => c.name),
                        datasets: [{
                            data: campaigns.map(c => c.spend),
                            backgroundColor: [
                                colors.blue,
                                colors.purple,
                                colors.orange,
                                colors.green,
                                'rgba(236, 72, 153, 1)',
                                'rgba(14, 165, 233, 1)'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: { color: '#f9fafb' }
                            }
                        }
                    }
                });
            }

            // Cargar datos iniciales
            updateCharts();
        }

        // ============================================
        // FILTROS Y ORDENAMIENTO
        // ============================================

        function applyFilters() {
            const dateFilter = document.getElementById('dateFilter').value;
            const roasFilter = parseFloat(document.getElementById('roasFilter').value);
            const sortBy = document.getElementById('sortBy').value;

            const campaignCards = Array.from(document.querySelectorAll('.campaign-card'));

            // Filtrar por ROAS
            campaignCards.forEach(card => {
                const roasElement = card.querySelector('.campaign-roas');
                if (roasElement) {
                    const roasText = roasElement.textContent.replace('ROAS: ', '').replace('x', '').trim();
                    const roas = roasText === '‚àû' ? 999 : parseFloat(roasText);

                    if (roas >= roasFilter) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                }
            });

            // Ordenar cards
            const container = document.querySelector('.campaign-roas-grid');
            const visibleCards = campaignCards.filter(card => card.style.display !== 'none');

            visibleCards.sort((a, b) => {
                let valueA, valueB;

                if (sortBy.startsWith('roas')) {
                    const roasA = a.querySelector('.campaign-roas').textContent.replace('ROAS: ', '').replace('x', '').trim();
                    const roasB = b.querySelector('.campaign-roas').textContent.replace('ROAS: ', '').replace('x', '').trim();
                    valueA = roasA === '‚àû' ? 999 : parseFloat(roasA);
                    valueB = roasB === '‚àû' ? 999 : parseFloat(roasB);
                } else if (sortBy.startsWith('revenue')) {
                    valueA = parseFloat(a.querySelector('.campaign-stat:nth-child(4) .stat-value').textContent.replace('$', ''));
                    valueB = parseFloat(b.querySelector('.campaign-stat:nth-child(4) .stat-value').textContent.replace('$', ''));
                } else if (sortBy.startsWith('margin')) {
                    valueA = parseFloat(a.querySelector('.tier1-metric:nth-child(3) .tier1-value').textContent.replace('$', ''));
                    valueB = parseFloat(b.querySelector('.tier1-metric:nth-child(3) .tier1-value').textContent.replace('$', ''));
                } else if (sortBy.startsWith('purchases')) {
                    valueA = parseInt(a.querySelector('.campaign-stat:nth-child(3) .stat-value').textContent);
                    valueB = parseInt(b.querySelector('.campaign-stat:nth-child(3) .stat-value').textContent);
                } else if (sortBy.startsWith('conversion')) {
                    valueA = parseFloat(a.querySelector('.tier1-metric:nth-child(4) .tier1-value').textContent.replace('%', ''));
                    valueB = parseFloat(b.querySelector('.tier1-metric:nth-child(4) .tier1-value').textContent.replace('%', ''));
                }

                if (sortBy.endsWith('desc')) {
                    return valueB - valueA;
                } else {
                    return valueA - valueB;
                }
            });

            // Reordenar en el DOM
            visibleCards.forEach(card => container.appendChild(card));

            // Actualizar gr√°ficos con el filtro de fecha
            updateCharts();
        }

        // ============================================
        // SIMULADOR DE ESCALA
        // ============================================

        async function simulateScale(campaignName, multiplier) {
            try {
                const response = await fetch('/api/scale-simulator', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        campaignName,
                        multiplier
                    })
                });

                const data = await response.json();

                if (data.success) {
                    const result = data.simulation;
                    const resultId = campaignName.replace(/[^a-zA-Z0-9]/g, '_');
                    const resultDiv = document.getElementById(`scale-result-${resultId}`);

                    if (resultDiv) {
                        resultDiv.style.display = 'block';
                        resultDiv.innerHTML = `
                            <h5 style="margin-bottom: 12px; color: var(--text-primary); font-size: 1rem;">üí∞ Proyecci√≥n (${result.multiplier}x Presupuesto)</h5>
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 14px;">
                                <div>
                                    <div style="opacity: 0.7;">Gasto Actual:</div>
                                    <div style="font-weight: bold; color: #ef4444;">$${result.current.spend.toFixed(2)}</div>
                                </div>
                                <div>
                                    <div style="opacity: 0.7;">Gasto Proyectado:</div>
                                    <div style="font-weight: bold; color: #ef4444;">$${result.projected.spend.toFixed(2)}</div>
                                </div>
                                <div>
                                    <div style="opacity: 0.7;">Ingresos Actuales:</div>
                                    <div style="font-weight: bold; color: #10b981;">$${result.current.revenue.toFixed(2)}</div>
                                </div>
                                <div>
                                    <div style="opacity: 0.7;">Ingresos Proyectados:</div>
                                    <div style="font-weight: bold; color: #10b981;">$${result.projected.revenue.toFixed(2)}</div>
                                </div>
                                <div>
                                    <div style="opacity: 0.7;">ROAS Actual:</div>
                                    <div style="font-weight: bold; color: #3b82f6;">${result.current.roas}x</div>
                                </div>
                                <div>
                                    <div style="opacity: 0.7;">ROAS Proyectado:</div>
                                    <div style="font-weight: bold; color: #3b82f6;">${result.projected.roas}x</div>
                                </div>
                                <div style="grid-column: span 2; margin-top: 8px; padding-top: 8px; border-top: 1px solid rgba(255,255,255,0.1);">
                                    <div style="opacity: 0.7;">Ganancia Adicional Estimada:</div>
                                    <div style="font-weight: bold; font-size: 16px; color: ${result.projected.additional_margin >= 0 ? '#10b981' : '#ef4444'};">
                                        ${result.projected.additional_margin >= 0 ? '+' : ''}$${result.projected.additional_margin.toFixed(2)}
                                    </div>
                                    <div style="font-size: 11px; opacity: 0.6; margin-top: 4px;">
                                        * Proyecci√≥n con ${result.degradation_applied}% de degradaci√≥n de rendimiento
                                    </div>
                                </div>
                            </div>
                        `;
                    }
                } else {
                    alert('Error al simular escala: ' + data.error);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al simular escala');
            }
        }

        // ============================================
        // DASHBOARD EN VIVO - AUTO REFRESH & NOTIFICACIONES
        // ============================================

        let autoRefreshInterval = null;
        let countdownInterval = null;
        let secondsUntilRefresh = 300; // 5 minutos
        let previousROAS = {}; // Almacenar ROAS anterior

        // Solicitar permiso para notificaciones
        async function requestNotificationPermission() {
            if ('Notification' in window && Notification.permission === 'default') {
                const permission = await Notification.requestPermission();
                console.log('üì¨ Permiso de notificaciones:', permission);
            }
        }

        // Mostrar notificaci√≥n del navegador
        function showNotification(title, body, icon = 'üí∞') {
            if ('Notification' in window && Notification.permission === 'granted') {
                const notification = new Notification(title, {
                    body: body,
                    icon: '/favicon.ico',
                    badge: '/favicon.ico',
                    tag: 'roas-change',
                    requireInteraction: false,
                    silent: false
                });

                notification.onclick = function() {
                    window.focus();
                    notification.close();
                };

                // Auto cerrar despu√©s de 10 segundos
                setTimeout(() => notification.close(), 10000);
            }
        }

        // Mostrar notificaci√≥n en pantalla
        function showInPageNotification(message, type = 'info') {
            const colors = {
                success: { bg: 'rgba(16, 185, 129, 0.2)', border: '#10b981', icon: '‚úÖ' },
                warning: { bg: 'rgba(245, 158, 11, 0.2)', border: '#f59e0b', icon: '‚ö†Ô∏è' },
                danger: { bg: 'rgba(239, 68, 68, 0.2)', border: '#ef4444', icon: 'üî¥' },
                info: { bg: 'rgba(59, 130, 246, 0.2)', border: '#3b82f6', icon: '‚ÑπÔ∏è' }
            };

            const color = colors[type] || colors.info;

            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 80px;
                right: 20px;
                background: ${color.bg};
                border: 2px solid ${color.border};
                border-radius: 12px;
                padding: 15px 20px;
                min-width: 300px;
                max-width: 400px;
                box-shadow: 0 8px 24px rgba(0,0,0,0.4);
                z-index: 9999;
                animation: slideInRight 0.3s ease;
                backdrop-filter: blur(10px);
            `;

            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 12px;">
                    <span style="font-size: 24px;">${color.icon}</span>
                    <div style="flex: 1;">
                        <div style="font-weight: bold; margin-bottom: 4px;">Dashboard Actualizado</div>
                        <div style="font-size: 14px; opacity: 0.9;">${message}</div>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; font-size: 20px; cursor: pointer; opacity: 0.6; padding: 0; width: 24px; height: 24px;">√ó</button>
                </div>
            `;

            document.body.appendChild(notification);

            // Auto remover despu√©s de 8 segundos
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.style.animation = 'slideOutRight 0.3s ease';
                    setTimeout(() => notification.remove(), 300);
                }
            }, 8000);
        }

        // Actualizar timestamp de √∫ltima actualizaci√≥n
        function updateLastUpdateTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('es-AR', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });

            const lastUpdateElement = document.getElementById('lastUpdateTime');
            if (lastUpdateElement) {
                lastUpdateElement.textContent = timeString;
            }
        }

        // Actualizar countdown
        function updateCountdown() {
            const minutes = Math.floor(secondsUntilRefresh / 60);
            const seconds = secondsUntilRefresh % 60;
            const countdownElement = document.getElementById('nextUpdateCountdown');

            if (countdownElement) {
                countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;

                // Cambiar color seg√∫n urgencia
                if (secondsUntilRefresh <= 30) {
                    countdownElement.style.color = '#ef4444';
                } else if (secondsUntilRefresh <= 60) {
                    countdownElement.style.color = '#f59e0b';
                } else {
                    countdownElement.style.color = '#10b981';
                }
            }

            secondsUntilRefresh--;

            if (secondsUntilRefresh < 0) {
                secondsUntilRefresh = 300; // Reset a 5 minutos
            }
        }

        // Detectar cambios en ROAS
        function detectROASChanges(newCampaignStats) {
            const changes = [];

            Object.keys(newCampaignStats).forEach(campaignName => {
                const newROAS = parseFloat(newCampaignStats[campaignName].roas);
                const oldROAS = previousROAS[campaignName];

                if (oldROAS !== undefined && oldROAS !== newROAS) {
                    const change = newROAS - oldROAS;
                    const percentChange = oldROAS > 0 ? ((change / oldROAS) * 100).toFixed(1) : 0;

                    changes.push({
                        campaign: campaignName,
                        oldROAS: oldROAS,
                        newROAS: newROAS,
                        change: change,
                        percentChange: percentChange
                    });

                    // Notificaci√≥n del navegador
                    const changeIcon = change > 0 ? 'üìà' : 'üìâ';
                    const changeText = change > 0 ? 'aument√≥' : 'disminuy√≥';

                    showNotification(
                        `${changeIcon} ROAS ${changeText}`,
                        `${campaignName}: ${oldROAS.toFixed(2)}x ‚Üí ${newROAS.toFixed(2)}x (${change > 0 ? '+' : ''}${percentChange}%)`
                    );
                }

                // Actualizar ROAS anterior
                previousROAS[campaignName] = newROAS;
            });

            return changes;
        }

        // Recargar datos del dashboard
        async function refreshDashboard() {
            try {
                console.log('üîÑ Actualizando dashboard...');

                // Mostrar indicador de carga
                const liveIndicator = document.getElementById('liveIndicator');
                if (liveIndicator) {
                    liveIndicator.style.background = '#f59e0b';
                }

                // Hacer fetch de los nuevos datos
                const response = await fetch(window.location.href);
                const html = await response.text();

                // Parsear el HTML
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');

                // Extraer datos de campa√±as del nuevo HTML
                const campaignCards = doc.querySelectorAll('.campaign-card');
                const newCampaignStats = {};

                campaignCards.forEach(card => {
                    const nameElement = card.querySelector('.campaign-name');
                    const roasElement = card.querySelector('.campaign-roas');

                    if (nameElement && roasElement) {
                        const name = nameElement.textContent.trim();
                        const roasText = roasElement.textContent.replace('ROAS: ', '').replace('x', '').trim();
                        const roas = roasText === '‚àû' ? 999 : parseFloat(roasText);

                        newCampaignStats[name] = { roas: roas };
                    }
                });

                // Detectar cambios en ROAS
                const changes = detectROASChanges(newCampaignStats);

                // Recargar la p√°gina completa si hay cambios significativos
                if (changes.length > 0) {
                    let changeMessage = `${changes.length} campa√±a(s) con cambios en ROAS`;
                    showInPageNotification(changeMessage, 'warning');

                    // Recargar despu√©s de 2 segundos para que el usuario vea la notificaci√≥n
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    // Solo actualizar timestamp si no hay cambios
                    showInPageNotification('Datos actualizados. Sin cambios en ROAS', 'info');
                    updateLastUpdateTime();
                }

                // Restaurar indicador
                if (liveIndicator) {
                    liveIndicator.style.background = '#10b981';
                }

                console.log('‚úÖ Dashboard actualizado');
            } catch (error) {
                console.error('‚ùå Error al actualizar dashboard:', error);
                showInPageNotification('Error al actualizar datos', 'danger');

                const liveIndicator = document.getElementById('liveIndicator');
                if (liveIndicator) {
                    liveIndicator.style.background = '#ef4444';
                }
            }
        }

        // Actualizaci√≥n manual
        async function manualRefresh() {
            const refreshBtn = document.getElementById('manualRefreshBtn');
            const refreshIcon = document.getElementById('refreshIcon');

            if (refreshBtn) {
                refreshBtn.disabled = true;
                refreshBtn.style.opacity = '0.6';
                refreshBtn.style.cursor = 'not-allowed';
            }

            if (refreshIcon) {
                refreshIcon.style.animation = 'spin 1s linear infinite';
            }

            // Agregar animaci√≥n de spin
            if (!document.getElementById('spin-animation')) {
                const style = document.createElement('style');
                style.id = 'spin-animation';
                style.textContent = `
                    @keyframes spin {
                        from { transform: rotate(0deg); }
                        to { transform: rotate(360deg); }
                    }
                `;
                document.head.appendChild(style);
            }

            await refreshDashboard();

            // Reset countdown
            secondsUntilRefresh = 300;

            if (refreshBtn) {
                refreshBtn.disabled = false;
                refreshBtn.style.opacity = '1';
                refreshBtn.style.cursor = 'pointer';
            }

            if (refreshIcon) {
                refreshIcon.style.animation = '';
            }
        }

        // Inicializar auto-refresh
        function initAutoRefresh() {
            // Solicitar permiso para notificaciones
            requestNotificationPermission();

            // Guardar ROAS inicial
            const campaignCards = document.querySelectorAll('.campaign-card');
            campaignCards.forEach(card => {
                const nameElement = card.querySelector('.campaign-name');
                const roasElement = card.querySelector('.campaign-roas');

                if (nameElement && roasElement) {
                    const name = nameElement.textContent.trim();
                    const roasText = roasElement.textContent.replace('ROAS: ', '').replace('x', '').trim();
                    const roas = roasText === '‚àû' ? 999 : parseFloat(roasText);

                    previousROAS[name] = roas;
                }
            });

            // Actualizar √∫ltima actualizaci√≥n
            updateLastUpdateTime();

            // Countdown cada segundo
            countdownInterval = setInterval(updateCountdown, 1000);

            // Auto-refresh cada 5 minutos
            autoRefreshInterval = setInterval(() => {
                refreshDashboard();
                secondsUntilRefresh = 300; // Reset countdown
            }, 300000); // 300000ms = 5 minutos

            console.log('‚úÖ Auto-refresh activado (cada 5 minutos)');
            console.log('üîî Notificaciones:', Notification.permission);

            // Agregar animaci√≥n de slide
            const style = document.createElement('style');
            style.textContent = `
                @keyframes slideInRight {
                    from {
                        transform: translateX(400px);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }

                @keyframes slideOutRight {
                    from {
                        transform: translateX(0);
                        opacity: 1;
                    }
                    to {
                        transform: translateX(400px);
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(style);
        }

        // Iniciar cuando carga la p√°gina
        document.addEventListener('DOMContentLoaded', () => {
            initAutoRefresh();
        });

        // Limpiar intervalos al salir
        window.addEventListener('beforeunload', () => {
            if (autoRefreshInterval) clearInterval(autoRefreshInterval);
            if (countdownInterval) clearInterval(countdownInterval);
        });
    </script>
</body>
</html>
