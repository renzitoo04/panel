<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel CRM - Tracking de Conversiones</title>
    <link rel="stylesheet" href="/style.css">

    
</head>
<body>
    <!-- SIDEBAR LATERAL PLEGABLE -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h3>Herramientas</h3>
            <button class="sidebar-toggle" onclick="toggleSidebar()">
                <span class="toggle-icon">◀</span>
            </button>
        </div>

        <div class="sidebar-menu">
            <a href="/" class="menu-item active">
                <span class="menu-icon">📊</span>
                <span class="menu-text">Dashboard</span>
            </a>
            <a href="/campaigns" class="menu-item">
                <span class="menu-icon">💰</span>
                <span class="menu-text">Campañas</span>
            </a>
            <a href="/finanzas" class="menu-item">
                <span class="menu-icon">💵</span>
                <span class="menu-text">Finanzas</span>
            </a>
            <a href="/numeros" class="menu-item">
                <span class="menu-icon">📱</span>
                <span class="menu-text">Números</span>
            </a>
            <a href="/settings" class="menu-item">
                <span class="menu-icon">⚙️</span>
                <span class="menu-text">Configuración</span>
            </a>
            <button class="menu-item" onclick="showTool('notes')" data-tool="notes">
                <span class="menu-icon">📝</span>
                <span class="menu-text">Notas</span>
            </button>
            <button class="menu-item" onclick="showTool('calculator')" data-tool="calculator">
                <span class="menu-icon">🧮</span>
                <span class="menu-text">Calculadora</span>
            </button>
            <button class="menu-item" onclick="showTool('tasks')" data-tool="tasks">
                <span class="menu-icon">✓</span>
                <span class="menu-text">Tareas</span>
            </button>
        </div>
    </div>

    <!-- BOTÓN FLOTANTE PARA ABRIR SIDEBAR (cuando está cerrado) -->
    <button class="sidebar-floating-btn" id="sidebarFloatingBtn" onclick="toggleSidebar()">
        <span>▶</span>
    </button>

    <div class="main-content" id="mainContent">
        <div class="container">
        <header class="header">
            <div class="header-content">
                <div class="header-title">
                    <h1>📊 Panel de Tracking</h1>
                    <p class="subtitle">Sistema de seguimiento de conversiones con Facebook</p>
                </div>
                <div class="header-actions">
                    <button id="themeToggle" class="theme-toggle" onclick="toggleTheme()" title="Cambiar tema">
                        <span class="theme-icon">🌙</span>
                    </button>
                    <div class="landing-selector">
                        <label for="landingSelect">Landing Page:</label>
                        <select id="landingSelect" class="landing-select" onchange="switchLanding(this.value)">
                            <option value="default">Cargando...</option>
                        </select>
                    </div>
                </div>
            </div>
        </header>

        <!-- FILTROS TEMPORALES (estilo Facebook Ads) -->
        <section class="conversion-metrics" style="margin-bottom: 20px;">
            <div class="section-header">
                <h2>🗓️ Filtrar por Fecha</h2>
            </div>
            <div class="filters-container">
                <div class="filter-group">
                    <label for="dateRangeFilter">Rango:</label>
                    <select id="dateRangeFilter" onchange="applyDateFilter()">
                        <option value="all" selected>Todo el tiempo</option>
                        <option value="today">Hoy</option>
                        <option value="yesterday">Ayer</option>
                        <option value="last7">Últimos 7 días</option>
                        <option value="last30">Últimos 30 días</option>
                        <option value="last90">Últimos 90 días</option>
                        <option value="thisWeek">Esta semana</option>
                        <option value="lastWeek">Semana pasada</option>
                        <option value="thisMonth">Este mes</option>
                        <option value="lastMonth">Mes pasado</option>
                        <option value="custom">Rango personalizado</option>
                    </select>
                </div>

                <div id="customDateRangeNew" style="display: none;">
                    <div class="filter-group">
                        <label for="startDateNew">Desde:</label>
                        <input type="date" id="startDateNew" onchange="applyCustomDateRange()">
                    </div>
                    <div class="filter-group">
                        <label for="endDateNew">Hasta:</label>
                        <input type="date" id="endDateNew" onchange="applyCustomDateRange()">
                    </div>
                </div>

                <div class="filter-group">
                    <button onclick="resetFilters()" class="btn btn-secondary" style="padding: 10px 20px;">
                        🔄 Resetear Filtros
                    </button>
                </div>
            </div>
        </section>

        <!-- ESTADÍSTICAS -->
        <section class="stats-grid" id="statsSection">
            <div class="stat-card">
                <div class="stat-icon">👆</div>
                <div class="stat-value"><%= stats.total_clicks %></div>
                <div class="stat-label">Clicks totales</div>
                <% if (temporalComparison && temporalComparison.changes) { %>
                    <div class="stat-trend <%= parseFloat(temporalComparison.changes.clicks) >= 0 ? 'trend-up' : 'trend-down' %>">
                        <%= parseFloat(temporalComparison.changes.clicks) >= 0 ? '↑' : '↓' %> <%= Math.abs(temporalComparison.changes.clicks) %>% vs mes anterior
                    </div>
                <% } %>
            </div>

            <div class="stat-card">
                <div class="stat-icon">💬</div>
                <div class="stat-value"><%= stats.total_messages %></div>
                <div class="stat-label">Mensajes recibidos</div>
                <% if (temporalComparison && temporalComparison.changes) { %>
                    <div class="stat-trend <%= parseFloat(temporalComparison.changes.messages) >= 0 ? 'trend-up' : 'trend-down' %>">
                        <%= parseFloat(temporalComparison.changes.messages) >= 0 ? '↑' : '↓' %> <%= Math.abs(temporalComparison.changes.messages) %>% vs mes anterior
                    </div>
                <% } %>
            </div>

            <div class="stat-card">
                <div class="stat-icon">🛒</div>
                <div class="stat-value"><%= stats.total_purchases %></div>
                <div class="stat-label">Compras realizadas</div>
                <% if (temporalComparison && temporalComparison.changes) { %>
                    <div class="stat-trend <%= parseFloat(temporalComparison.changes.purchases) >= 0 ? 'trend-up' : 'trend-down' %>">
                        <%= parseFloat(temporalComparison.changes.purchases) >= 0 ? '↑' : '↓' %> <%= Math.abs(temporalComparison.changes.purchases) %>% vs mes anterior
                    </div>
                <% } %>
            </div>

            <div class="stat-card highlight">
                <div class="stat-icon">📈</div>
                <div class="stat-value"><%= stats.conversion_click_to_purchase %>%</div>
                <div class="stat-label">Conversión total</div>
                <% if (temporalComparison && temporalComparison.changes) { %>
                    <div class="stat-trend <%= parseFloat(temporalComparison.changes.conversion) >= 0 ? 'trend-up' : 'trend-down' %>">
                        <%= parseFloat(temporalComparison.changes.conversion) >= 0 ? '↑' : '↓' %> <%= Math.abs(temporalComparison.changes.conversion) %>% vs mes anterior
                    </div>
                <% } %>
            </div>
        </section>

        <!-- MÉTRICAS DE CONVERSIÓN -->
        <section class="conversion-metrics">
            <h2>Métricas de conversión</h2>
            <div class="metrics-grid">
                <div class="metric">
                    <span class="metric-label">Click → Mensaje:</span>
                    <span class="metric-value"><%= stats.conversion_click_to_message %>%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Mensaje → Compra:</span>
                    <span class="metric-value"><%= stats.conversion_message_to_purchase %>%</span>
                </div>
            </div>
        </section>


        <!-- HERRAMIENTAS Y FILTROS -->
        <section class="tools-section">
            <div class="tools-header">
                <h2>Herramientas</h2>
                <button onclick="exportToExcel()" class="btn btn-export">📥 Exportar a Excel</button>
            </div>

            <div class="filters-container">
                <div class="filter-group">
                    <label>Filtrar por fecha:</label>
                    <select id="dateFilter" onchange="filterByDate()">
                        <option value="all">Todos los eventos</option>
                        <option value="today">Hoy</option>
                        <option value="yesterday">Ayer</option>
                        <option value="week">Última semana</option>
                        <option value="month">Último mes</option>
                        <option value="custom">Rango personalizado</option>
                    </select>
                </div>

                <div id="customDateRange" style="display: none;" class="filter-group">
                    <input type="date" id="startDate" onchange="filterByCustomRange()">
                    <span>hasta</span>
                    <input type="date" id="endDate" onchange="filterByCustomRange()">
                </div>
            </div>
        </section>

        <!-- GRÁFICO DE CONVERSIONES -->
        <section class="chart-section" style="border: 2px solid #3b82f6; padding: 20px; margin: 20px 0;">
            <h2>📈 Evolución de conversiones</h2>
            <div id="chartLoadingMessage" style="background: rgba(59, 130, 246, 0.1); padding: 10px; margin: 10px 0; border-radius: 8px;">
                <p style="color: var(--text-secondary); font-size: 0.9rem;">Cargando gráfico...</p>
            </div>
            <div id="chartErrorMessage" style="display: none; background: rgba(239, 68, 68, 0.1); padding: 10px; margin: 10px 0; border-radius: 8px;">
                <p style="color: var(--accent-red); font-size: 0.9rem;">Error al cargar el gráfico. Revisa la consola (F12).</p>
            </div>
            <canvas id="conversionsChart" width="400" height="100" style="border: 1px dashed #666;"></canvas>
        </section>

        <!-- FORMULARIOS DE REGISTRO MANUAL -->
        <section class="forms-section">
            <div class="form-container">
                <h3>✉️ Registrar mensaje recibido</h3>
                <form id="messageForm" class="action-form" novalidate>
                    <div class="form-field">
                        <label for="messageEventId">Event ID <span class="required">*</span></label>
                        <input
                            type="text"
                            id="messageEventId"
                            name="eventId"
                            placeholder="Pega aquí el código del mensaje de WhatsApp"
                            required
                        >
                        <span class="field-error" id="messageEventIdError"></span>
                    </div>
                    <button type="submit" class="btn btn-message">Marcar como mensaje</button>
                </form>
            </div>

            <div class="form-container">
                <h3>💰 Registrar compra realizada</h3>
                <form id="purchaseForm" class="action-form" novalidate>
                    <div class="form-field">
                        <label for="purchaseEventId">Event ID <span class="required">*</span></label>
                        <input
                            type="text"
                            id="purchaseEventId"
                            name="eventId"
                            placeholder="Código del cliente que compró"
                            required
                        >
                        <span class="field-error" id="purchaseEventIdError"></span>
                    </div>
                    <div class="form-row">
                        <div class="form-field">
                            <label for="purchaseValue">Valor <span class="required">*</span></label>
                            <input
                                type="number"
                                id="purchaseValue"
                                name="value"
                                placeholder="Ej: 100.00"
                                step="0.01"
                                min="0.01"
                                required
                            >
                            <span class="field-error" id="purchaseValueError"></span>
                        </div>
                        <div class="form-field">
                            <label for="purchaseCurrency">Moneda</label>
                            <select id="purchaseCurrency" name="currency">
                                <option value="USD">USD</option>
                                <option value="EUR">EUR</option>
                                <option value="ARS">ARS</option>
                                <option value="MXN">MXN</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-purchase">Marcar como compra</button>
                </form>
            </div>
        </section>

        <!-- TABLA DE EVENTOS -->
        <section class="events-section">
            <div class="section-header">
                <h2>Historial de eventos</h2>
                <button onclick="exportEventsToCSV()" class="btn btn-export">📥 Exportar CSV</button>
            </div>

            <!-- BARRA DE BÚSQUEDA Y FILTROS -->
            <div class="search-filters-container">
                <div class="search-container">
                    <input
                        type="text"
                        id="searchEventId"
                        placeholder="🔍 Buscar por Event ID..."
                        class="search-input"
                    >
                    <button id="clearSearch" class="btn-clear-search" style="display: none;">✕</button>
                </div>

                <div class="filter-container">
                    <input
                        type="text"
                        id="filterIP"
                        placeholder="🌐 Filtrar por IP..."
                        class="search-input"
                    >
                </div>

                <div class="filter-container">
                    <select id="filterCampaign" class="search-input">
                        <option value="">📢 Todas las campañas</option>
                    </select>
                </div>

                <div class="filter-container">
                    <select id="filterStatus" class="search-input">
                        <option value="">📊 Todos los estados</option>
                        <option value="purchase">✅ Compras</option>
                        <option value="message">💬 Mensajes</option>
                        <option value="click">👆 Clicks</option>
                        <option value="pageview">👁️ Vistas</option>
                    </select>
                </div>

                <button onclick="clearAllFilters()" class="btn btn-secondary">🔄 Limpiar filtros</button>
            </div>

            <% if (events.length === 0) { %>
                <div class="empty-state">
                    <p>📭 No hay eventos registrados todavía</p>
                    <p class="empty-hint">Los eventos aparecerán aquí cuando alguien visite tu landing page</p>
                </div>
            <% } else { %>
                <div class="table-container">
                    <table class="events-table">
                        <thead>
                            <tr>
                                <th>Estado</th>
                                <th>Event ID</th>
                                <th>IP del Cliente</th>
                                <th>Campaña</th>
                                <th>fbclid</th>
                                <th>Fecha/Hora</th>
                                <th>Click WhatsApp</th>
                                <th>Mensaje</th>
                                <th>Compra</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% events.forEach(event => { %>
                                <tr class="event-row <%= event.has_purchase ? 'status-purchase' : event.has_message ? 'status-message' : event.whatsapp_clicked ? 'status-click' : 'status-pageview' %>">
                                    <td>
                                        <span class="status-badge <%= event.has_purchase ? 'badge-purchase' : event.has_message ? 'badge-message' : event.whatsapp_clicked ? 'badge-click' : 'badge-pageview' %>">
                                            <%= event.has_purchase ? '✅ Compra' : event.has_message ? '💬 Mensaje' : event.whatsapp_clicked ? '👆 Click' : '👁️ Vista' %>
                                        </span>
                                    </td>
                                    <td>
                                        <code class="event-id" title="<%= event.event_id %>">
                                            <%= event.event_id.substring(0, 8) %>...
                                        </code>
                                    </td>
                                    <td>
                                        <code class="ip-address">
                                            <%= event.client_ip || 'No capturada' %>
                                        </code>
                                    </td>
                                    <td>
                                        <% if (event.attribution && event.attribution.utm_campaign) { %>
                                            <span class="badge-campaign" title="<%= event.attribution.utm_campaign %>">
                                                <%= event.attribution.utm_campaign.substring(0, 15) %><%= event.attribution.utm_campaign.length > 15 ? '...' : '' %>
                                            </span>
                                        <% } else { %>
                                            <span class="text-muted">-</span>
                                        <% } %>
                                    </td>
                                    <td>
                                        <% if (event.attribution && event.attribution.fbclid) { %>
                                            <code class="fbclid" title="<%= event.attribution.fbclid %>">
                                                <%= event.attribution.fbclid.substring(0, 10) %>...
                                            </code>
                                        <% } else if (event.attribution && event.attribution.gclid) { %>
                                            <code class="gclid" title="<%= event.attribution.gclid %>">
                                                G:<%= event.attribution.gclid.substring(0, 8) %>...
                                            </code>
                                        <% } else { %>
                                            <span class="text-muted">-</span>
                                        <% } %>
                                    </td>
                                    <td>
                                        <%= new Date(event.created_at).toLocaleString('es-AR', {
                                            day: '2-digit',
                                            month: '2-digit',
                                            year: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit',
                                            timeZone: 'America/Argentina/Buenos_Aires'
                                        }) %>
                                    </td>
                                    <td>
                                        <%= event.whatsapp_clicked ? '✅' : '❌' %>
                                    </td>
                                    <td>
                                        <%= event.has_message ? '✅' : '❌' %>
                                        <% if (event.has_message && event.message_time) { %>
                                            <br><small><%= new Date(event.message_time).toLocaleTimeString('es-AR', { timeZone: 'America/Argentina/Buenos_Aires' }) %></small>
                                        <% } %>
                                    </td>
                                    <td>
                                        <%= event.has_purchase ? '✅' : '❌' %>
                                        <% if (event.has_purchase && event.purchase_value) { %>
                                            <br><small>$<%= event.purchase_value %></small>
                                        <% } %>
                                    </td>
                                    <td>
                                        <button
                                            class="btn-copy"
                                            onclick="copyEventId('<%= event.event_id %>')"
                                            title="Copiar Event ID completo"
                                        >
                                            📋 Copiar ID
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>

                <!-- PAGINACIÓN -->
                <div class="pagination-controls" id="paginationControls" style="display: none;">
                    <div class="pagination-info">
                        Mostrando <span id="showingFrom">1</span> - <span id="showingTo">20</span> de <span id="totalEvents">0</span> eventos
                    </div>
                    <div class="pagination-buttons">
                        <button onclick="changePage('prev')" id="prevBtn" class="btn-pagination">← Anterior</button>
                        <span id="pageInfo" style="margin: 0 15px; color: var(--text-muted);">Página <span id="currentPage">1</span> de <span id="totalPages">1</span></span>
                        <button onclick="changePage('next')" id="nextBtn" class="btn-pagination">Siguiente →</button>
                    </div>
                    <div class="pagination-size">
                        <label for="pageSize">Eventos por página:</label>
                        <select id="pageSize" onchange="changePageSize()">
                            <option value="10">10</option>
                            <option value="20" selected>20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </div>
                </div>
            <% } %>
        </section>

        <!-- LOGS DE AUDITORÍA -->
        <section class="logs-section">
            <h2>📋 Logs de Facebook Conversion API (Últimos 50)</h2>

            <% if (logs.length === 0) { %>
                <div class="empty-state">
                    <p>📭 No hay logs todavía</p>
                    <p class="empty-hint">Los logs aparecerán aquí cuando se envíen eventos a Facebook</p>
                </div>
            <% } else { %>
                <div class="logs-container">
                    <% logs.forEach(log => { %>
                        <div class="log-entry <%= log.status === 'success' ? 'log-success' : 'log-error' %>">
                            <div class="log-header">
                                <span class="log-status">
                                    <%= log.status === 'success' ? '✅' : '❌' %>
                                    <strong><%= log.event_name %></strong>
                                </span>
                                <span class="log-time">
                                    <%= new Date(log.timestamp).toLocaleString('es-AR', {
                                        day: '2-digit',
                                        month: '2-digit',
                                        hour: '2-digit',
                                        minute: '2-digit',
                                        second: '2-digit',
                                        timeZone: 'America/Argentina/Buenos_Aires'
                                    }) %>
                                </span>
                            </div>
                            <div class="log-details">
                                <div class="log-detail">
                                    <strong>Event ID:</strong>
                                    <code class="event-id-small"><%= log.event_id.substring(0, 12) %>...</code>
                                    <button class="btn-copy-small" onclick="copyEventId('<%= log.event_id %>')">📋</button>
                                </div>
                                <div class="log-detail">
                                    <strong>Pixel ID:</strong>
                                    <code><%= log.pixel_id %></code>
                                </div>
                                <% if (log.status === 'success') { %>
                                    <div class="log-detail">
                                        <strong>Eventos recibidos:</strong>
                                        <span class="badge badge-success"><%= log.events_received || 1 %></span>
                                    </div>
                                    <% if (log.messages && log.messages.length > 0) { %>
                                        <div class="log-detail">
                                            <strong>Mensajes de Facebook:</strong>
                                            <ul class="log-messages">
                                                <% log.messages.forEach(msg => { %>
                                                    <li><%= msg %></li>
                                                <% }); %>
                                            </ul>
                                        </div>
                                    <% } %>
                                <% } else { %>
                                    <div class="log-detail log-error-detail">
                                        <strong>Error:</strong>
                                        <pre><%= JSON.stringify(log.error, null, 2) %></pre>
                                    </div>
                                <% } %>
                                <% if (log.payload && log.payload.custom_data && Object.keys(log.payload.custom_data).length > 0) { %>
                                    <div class="log-detail">
                                        <strong>Datos custom:</strong>
                                        <code><%= JSON.stringify(log.payload.custom_data) %></code>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } %>
        </section>

        <footer class="footer">
            <p>🔄 La página se actualiza automáticamente cada 30 segundos</p>
            <p class="footer-hint">Última actualización: <span id="lastUpdate"><%= new Date().toLocaleTimeString('es-AR', { timeZone: 'America/Argentina/Buenos_Aires' }) %></span></p>
        </footer>
    </div>

    <!-- PANEL DE NOTAS -->
    <div class="tool-panel" id="notesPanel" style="display: none;">
        <div class="tool-panel-header">
            <h2>📝 Notas rápidas</h2>
            <button class="btn-close-panel" onclick="showTool('dashboard')">✕</button>
        </div>
        <div class="tool-panel-content">
            <textarea id="notesTextarea" class="notes-textarea" placeholder="Escribe tus notas aquí... Se guardan automáticamente en tu navegador."></textarea>
            <div class="notes-actions">
                <button class="btn btn-primary" onclick="saveNotes()">💾 Guardar</button>
                <button class="btn btn-secondary" onclick="clearNotes()">🗑️ Limpiar</button>
            </div>
        </div>
    </div>

    <!-- PANEL DE CALCULADORA -->
    <div class="tool-panel" id="calculatorPanel" style="display: none;">
        <div class="tool-panel-header">
            <h2>🧮 Calculadoras</h2>
            <button class="btn-close-panel" onclick="showTool('dashboard')">✕</button>
        </div>
        <div class="tool-panel-content">
            <!-- CALCULADORA NORMAL -->
            <div class="calculator-section">
                <h3>Calculadora Normal</h3>
                <div class="standard-calculator">
                    <div class="calc-display">
                        <div id="calcDisplay" class="calc-display-text">0</div>
                    </div>
                    <div class="calc-buttons">
                        <button class="calc-btn calc-btn-function" onclick="clearCalc()">C</button>
                        <button class="calc-btn calc-btn-function" onclick="deleteCalc()">⌫</button>
                        <button class="calc-btn calc-btn-function" onclick="percentCalc()">%</button>
                        <button class="calc-btn calc-btn-operator" onclick="appendOperator('÷')">÷</button>

                        <button class="calc-btn" onclick="appendNumber('7')">7</button>
                        <button class="calc-btn" onclick="appendNumber('8')">8</button>
                        <button class="calc-btn" onclick="appendNumber('9')">9</button>
                        <button class="calc-btn calc-btn-operator" onclick="appendOperator('×')">×</button>

                        <button class="calc-btn" onclick="appendNumber('4')">4</button>
                        <button class="calc-btn" onclick="appendNumber('5')">5</button>
                        <button class="calc-btn" onclick="appendNumber('6')">6</button>
                        <button class="calc-btn calc-btn-operator" onclick="appendOperator('-')">-</button>

                        <button class="calc-btn" onclick="appendNumber('1')">1</button>
                        <button class="calc-btn" onclick="appendNumber('2')">2</button>
                        <button class="calc-btn" onclick="appendNumber('3')">3</button>
                        <button class="calc-btn calc-btn-operator" onclick="appendOperator('+')">+</button>

                        <button class="calc-btn calc-btn-zero" onclick="appendNumber('0')">0</button>
                        <button class="calc-btn" onclick="appendNumber('.')">.</button>
                        <button class="calc-btn calc-btn-equals" onclick="calculateResult()">=</button>
                    </div>
                </div>
            </div>

            <div class="calculator-section">
                <h3>Calcular ROAS</h3>
                <div class="calc-input-group">
                    <label>Ingresos Totales ($):</label>
                    <input type="number" id="calcRevenue" class="calc-input" placeholder="Ej: 5000">
                </div>
                <div class="calc-input-group">
                    <label>Gasto Publicitario ($):</label>
                    <input type="number" id="calcSpend" class="calc-input" placeholder="Ej: 1000">
                </div>
                <button class="btn btn-primary" onclick="calculateROAS()">Calcular</button>
                <div class="calc-result" id="roasResult"></div>
            </div>

            <div class="calculator-section">
                <h3>Calcular Margen</h3>
                <div class="calc-input-group">
                    <label>Ingresos ($):</label>
                    <input type="number" id="calcMarginRevenue" class="calc-input" placeholder="Ej: 5000">
                </div>
                <div class="calc-input-group">
                    <label>Gastos ($):</label>
                    <input type="number" id="calcMarginSpend" class="calc-input" placeholder="Ej: 3500">
                </div>
                <button class="btn btn-primary" onclick="calculateMargin()">Calcular</button>
                <div class="calc-result" id="marginResult"></div>
            </div>
        </div>
    </div>

    <!-- PANEL DE TAREAS -->
    <div class="tool-panel" id="tasksPanel" style="display: none;">
        <div class="tool-panel-header">
            <h2>✓ Lista de Tareas</h2>
            <button class="btn-close-panel" onclick="showTool('dashboard')">✕</button>
        </div>
        <div class="tool-panel-content">
            <div class="task-input-group">
                <input type="text" id="taskInput" class="task-input" placeholder="Nueva tarea..." onkeypress="if(event.key==='Enter') addTask()">
                <button class="btn btn-primary" onclick="addTask()">+ Agregar</button>
            </div>
            <ul id="taskList" class="task-list"></ul>
        </div>
    </div>

    <!-- PANEL DE CONFIGURACIÓN -->
    <div class="tool-panel" id="settingsPanel" style="display: none;">
        <div class="tool-panel-header">
            <h2>⚙️ Configuración de Facebook</h2>
            <button class="btn-close-panel" onclick="showTool('dashboard')">✕</button>
        </div>
        <div class="tool-panel-content">
            <div class="settings-info">
                <p style="color: var(--text-muted); margin-bottom: 25px; padding: 15px; background: rgba(59, 130, 246, 0.1); border-left: 3px solid var(--accent-blue); border-radius: 8px;">
                    Configura tu Pixel ID y Access Token de Facebook. Los cambios se aplicarán inmediatamente y no requieren reiniciar el servidor.
                </p>
            </div>

            <div class="settings-section">
                <h3>Facebook Pixel ID</h3>
                <div class="setting-input-group">
                    <label>Pixel ID:</label>
                    <input type="text" id="settingPixelId" class="calc-input" placeholder="Ej: 1126842699347074" value="<%= process.env.FACEBOOK_PIXEL_ID || '' %>">
                    <small style="color: var(--text-muted); display: block; margin-top: 8px;">
                        Lo encuentras en: Events Manager → Data Sources → Tu Pixel → Settings
                    </small>
                </div>
            </div>

            <div class="settings-section" style="margin-top: 30px;">
                <h3>Access Token</h3>
                <div class="setting-input-group">
                    <label>Facebook Access Token:</label>
                    <textarea id="settingAccessToken" class="settings-textarea" placeholder="Pega aquí tu Access Token de Facebook..." rows="4"><%= process.env.FACEBOOK_ACCESS_TOKEN || '' %></textarea>
                    <small style="color: var(--text-muted); display: block; margin-top: 8px;">
                        Genera uno en: Events Manager → Settings → Conversions API → Generate Access Token
                    </small>
                </div>
            </div>

            <div class="settings-section" style="margin-top: 30px;">
                <h3>Configuración Actual</h3>
                <div class="current-config">
                    <div class="config-item">
                        <span class="config-label">Pixel ID:</span>
                        <span class="config-value" id="currentPixelId"><%= process.env.FACEBOOK_PIXEL_ID || 'No configurado' %></span>
                    </div>
                    <div class="config-item">
                        <span class="config-label">Access Token:</span>
                        <span class="config-value"><%= process.env.FACEBOOK_ACCESS_TOKEN ? '✅ Configurado (' + process.env.FACEBOOK_ACCESS_TOKEN.substring(0, 20) + '...)' : '❌ No configurado' %></span>
                    </div>
                </div>
            </div>

            <div class="settings-actions" style="margin-top: 30px;">
                <button class="btn btn-primary" onclick="saveSettings()" style="width: 100%;">💾 Guardar Configuración</button>
            </div>

            <div id="settingsMessage" class="settings-message" style="display: none; margin-top: 15px;"></div>
        </div>
    </div>

    </div><!-- Cierre de main-content -->

    <!-- Notificaciones -->
    <div id="notification" class="notification"></div>

    <!-- Cargar Chart.js ANTES de los scripts que lo usan -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>

    <script>
        // Obtener el landing actual del servidor
        const currentLandingId = '<%= currentLandingId %>';

        // Load landings dynamically
        async function loadLandingSelector() {
            try {
                const response = await fetch('/api/landings');
                const data = await response.json();

                if (data.success && data.landings) {
                    const select = document.getElementById('landingSelect');
                    select.innerHTML = ''; // Clear existing

                    data.landings.forEach(landing => {
                        const option = document.createElement('option');
                        option.value = landing.id;
                        option.textContent = landing.name;
                        // Seleccionar la landing actual
                        if (landing.id === currentLandingId) {
                            option.selected = true;
                        }
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading landings:', error);
            }
        }

        // Call on page load
        loadLandingSelector();

        // Función para cambiar de landing
        function switchLanding(landingId) {
            fetch('/api/switch-landing', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ landingId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert('Error al cambiar de landing');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al cambiar de landing');
            });
        }

        // Auto-refresh cada 30 segundos
        setTimeout(() => {
            window.location.reload();
        }, 30000);

        // Copiar event_id al portapapeles
        function copyEventId(eventId) {
            navigator.clipboard.writeText(eventId).then(() => {
                showNotification('✅ Event ID copiado al portapapeles', 'success');
            }).catch(() => {
                showNotification('❌ Error al copiar', 'error');
            });
        }

        // Mostrar notificación mejorada
        function showNotification(message, type = 'info', details = null) {
            const notification = document.getElementById('notification');

            if (details) {
                // Notificación con detalles expandidos
                notification.innerHTML = `
                    <div class="notification-header">${message}</div>
                    <div class="notification-details">
                        ${details}
                    </div>
                `;
            } else {
                notification.textContent = message;
            }

            notification.className = `notification show ${type}`;

            setTimeout(() => {
                notification.classList.remove('show');
            }, 5000);
        }

        // ============================================
        // SISTEMA DE FILTROS MÚLTIPLES
        // ============================================

        const searchInput = document.getElementById('searchEventId');
        const filterIP = document.getElementById('filterIP');
        const filterCampaign = document.getElementById('filterCampaign');
        const filterStatus = document.getElementById('filterStatus');
        const clearSearchBtn = document.getElementById('clearSearch');
        const tableRows = document.querySelectorAll('.event-row');

        // Poblar el select de campañas con valores únicos
        function populateCampaignFilter() {
            const campaigns = new Set();
            allEvents.forEach(event => {
                if (event.attribution && event.attribution.utm_campaign) {
                    campaigns.add(event.attribution.utm_campaign);
                }
            });

            campaigns.forEach(campaign => {
                const option = document.createElement('option');
                option.value = campaign;
                option.textContent = campaign;
                filterCampaign.appendChild(option);
            });
        }

        // Función principal de filtrado
        function applyFilters() {
            const searchTerm = searchInput.value.toLowerCase();
            const ipFilter = filterIP.value.toLowerCase();
            const campaignFilter = filterCampaign.value.toLowerCase();
            const statusFilter = filterStatus.value;

            let foundCount = 0;

            tableRows.forEach(row => {
                const eventIdElement = row.querySelector('.event-id');
                const ipElement = row.querySelector('.ip-address');
                const campaignElement = row.querySelector('.badge-campaign');

                const fullEventId = eventIdElement ? eventIdElement.getAttribute('title').toLowerCase() : '';
                const ip = ipElement ? ipElement.textContent.toLowerCase() : '';
                const campaign = campaignElement ? campaignElement.getAttribute('title').toLowerCase() : '';

                // Determinar el estado del evento
                let eventStatus = 'pageview';
                if (row.classList.contains('status-purchase')) eventStatus = 'purchase';
                else if (row.classList.contains('status-message')) eventStatus = 'message';
                else if (row.classList.contains('status-click')) eventStatus = 'click';

                // Aplicar todos los filtros
                const matchesEventId = !searchTerm || fullEventId.includes(searchTerm);
                const matchesIP = !ipFilter || ip.includes(ipFilter);
                const matchesCampaign = !campaignFilter || campaign.includes(campaignFilter);
                const matchesStatus = !statusFilter || eventStatus === statusFilter;

                if (matchesEventId && matchesIP && matchesCampaign && matchesStatus) {
                    row.style.display = '';
                    foundCount++;
                } else {
                    row.style.display = 'none';
                }
            });

            // Mostrar/ocultar botón de limpiar
            if (searchTerm) {
                clearSearchBtn.style.display = 'block';
            } else {
                clearSearchBtn.style.display = 'none';
            }

            // Mensaje de no resultados
            updateNoResultsMessage(foundCount, searchTerm || ipFilter || campaignFilter || statusFilter);
        }

        function updateNoResultsMessage(count, hasFilters) {
            const tableContainer = document.querySelector('.table-container');
            const existingNoResults = document.querySelector('.no-results-message');

            if (count === 0 && hasFilters && tableContainer) {
                if (!existingNoResults) {
                    const noResultsMsg = document.createElement('div');
                    noResultsMsg.className = 'no-results-message';
                    noResultsMsg.textContent = 'No se encontraron eventos con los filtros aplicados';
                    tableContainer.insertBefore(noResultsMsg, tableContainer.firstChild);
                }
            } else if (existingNoResults) {
                existingNoResults.remove();
            }
        }

        // Event listeners
        if (searchInput) searchInput.addEventListener('input', applyFilters);
        if (filterIP) filterIP.addEventListener('input', applyFilters);
        if (filterCampaign) filterCampaign.addEventListener('change', applyFilters);
        if (filterStatus) filterStatus.addEventListener('change', applyFilters);

        if (clearSearchBtn) {
            clearSearchBtn.addEventListener('click', function() {
                searchInput.value = '';
                clearSearchBtn.style.display = 'none';
                applyFilters();
            });
        }

        // Función global para limpiar todos los filtros
        function clearAllFilters() {
            if (searchInput) searchInput.value = '';
            if (filterIP) filterIP.value = '';
            if (filterCampaign) filterCampaign.value = '';
            if (filterStatus) filterStatus.value = '';
            applyFilters();
        }

        // Función para exportar eventos a CSV
        function exportEventsToCSV() {
            // Obtener solo las filas visibles
            const visibleRows = Array.from(tableRows).filter(row => row.style.display !== 'none');

            if (visibleRows.length === 0) {
                showNotification('⚠️ No hay eventos para exportar', 'warning');
                return;
            }

            let csv = 'Event ID,Fecha/Hora,IP Cliente,Campaña,fbclid,Click WhatsApp,Mensaje,Compra,Valor Compra\n';

            visibleRows.forEach(row => {
                const eventId = row.querySelector('.event-id')?.getAttribute('title') || '';
                const fecha = row.children[5]?.textContent.trim() || '';
                const ip = row.querySelector('.ip-address')?.textContent.trim() || 'N/A';
                const campaign = row.querySelector('.badge-campaign')?.getAttribute('title') || '-';
                const fbclid = row.querySelector('.fbclid')?.getAttribute('title') || '-';
                const click = row.children[6]?.textContent.includes('✅') ? 'Sí' : 'No';
                const mensaje = row.children[7]?.textContent.includes('✅') ? 'Sí' : 'No';
                const compraCell = row.children[8]?.textContent || '';
                const compra = compraCell.includes('✅') ? 'Sí' : 'No';
                const valorMatch = compraCell.match(/\$(\d+(?:\.\d+)?)/);
                const valor = valorMatch ? valorMatch[1] : '0';

                csv += `"${eventId}","${fecha}","${ip}","${campaign}","${fbclid}","${click}","${mensaje}","${compra}","${valor}"\n`;
            });

            // Descargar archivo
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            const now = new Date();
            const filename = `eventos_filtrados_${now.toISOString().split('T')[0]}.csv`;

            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            showNotification(`✅ ${visibleRows.length} eventos exportados a ${filename}`, 'success');
        }

        // ============================================
        // VALIDACIÓN DE FORMULARIOS EN TIEMPO REAL
        // ============================================

        function showFieldError(fieldId, errorId, message) {
            const field = document.getElementById(fieldId);
            const error = document.getElementById(errorId);

            if (field && error) {
                field.classList.add('field-invalid');
                field.classList.remove('field-valid');
                error.textContent = message;
                error.style.display = 'block';
            }
        }

        function hideFieldError(fieldId, errorId) {
            const field = document.getElementById(fieldId);
            const error = document.getElementById(errorId);

            if (field && error) {
                field.classList.remove('field-invalid');
                field.classList.add('field-valid');
                error.textContent = '';
                error.style.display = 'none';
            }
        }

        function validateEventId(value) {
            if (!value || value.trim() === '') {
                return 'El Event ID es obligatorio';
            }
            // Validar formato UUID básico
            const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
            if (!uuidRegex.test(value.trim())) {
                return 'El Event ID debe tener formato UUID válido (ej: 123e4567-e89b-12d3-a456-426614174000)';
            }
            return null;
        }

        function validatePurchaseValue(value) {
            if (!value || value === '') {
                return 'El valor es obligatorio';
            }
            const numValue = parseFloat(value);
            if (isNaN(numValue) || numValue <= 0) {
                return 'El valor debe ser mayor a 0';
            }
            return null;
        }

        // Validación en tiempo real para messageEventId
        const messageEventIdInput = document.getElementById('messageEventId');
        if (messageEventIdInput) {
            messageEventIdInput.addEventListener('blur', function() {
                const error = validateEventId(this.value);
                if (error) {
                    showFieldError('messageEventId', 'messageEventIdError', error);
                } else {
                    hideFieldError('messageEventId', 'messageEventIdError');
                }
            });

            messageEventIdInput.addEventListener('input', function() {
                if (this.classList.contains('field-invalid')) {
                    const error = validateEventId(this.value);
                    if (!error) {
                        hideFieldError('messageEventId', 'messageEventIdError');
                    }
                }
            });
        }

        // Validación en tiempo real para purchaseEventId
        const purchaseEventIdInput = document.getElementById('purchaseEventId');
        if (purchaseEventIdInput) {
            purchaseEventIdInput.addEventListener('blur', function() {
                const error = validateEventId(this.value);
                if (error) {
                    showFieldError('purchaseEventId', 'purchaseEventIdError', error);
                } else {
                    hideFieldError('purchaseEventId', 'purchaseEventIdError');
                }
            });

            purchaseEventIdInput.addEventListener('input', function() {
                if (this.classList.contains('field-invalid')) {
                    const error = validateEventId(this.value);
                    if (!error) {
                        hideFieldError('purchaseEventId', 'purchaseEventIdError');
                    }
                }
            });
        }

        // Validación en tiempo real para purchaseValue
        const purchaseValueInput = document.getElementById('purchaseValue');
        if (purchaseValueInput) {
            purchaseValueInput.addEventListener('blur', function() {
                const error = validatePurchaseValue(this.value);
                if (error) {
                    showFieldError('purchaseValue', 'purchaseValueError', error);
                } else {
                    hideFieldError('purchaseValue', 'purchaseValueError');
                }
            });

            purchaseValueInput.addEventListener('input', function() {
                if (this.classList.contains('field-invalid')) {
                    const error = validatePurchaseValue(this.value);
                    if (!error) {
                        hideFieldError('purchaseValue', 'purchaseValueError');
                    }
                }
            });
        }

        // Manejar formulario de mensaje
        const messageForm = document.getElementById('messageForm');
        if (messageForm) {
            messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Validar antes de enviar
            const eventId = document.getElementById('messageEventId').value.trim();
            const error = validateEventId(eventId);

            if (error) {
                showFieldError('messageEventId', 'messageEventIdError', error);
                return;
            }

            try {
                const response = await fetch(`/api/events/${eventId}/message`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const data = await response.json();

                if (data.success) {
                    const fbApi = data.facebook_api;
                    let details = `
                        <div><strong>Event ID:</strong> ${eventId.substring(0, 12)}...</div>
                        <div><strong>Evento:</strong> Contact (Mensaje)</div>
                    `;

                    if (fbApi && fbApi.success) {
                        details += `<div><strong>✅ Facebook:</strong> ${fbApi.events_received || 1} evento(s) recibido(s)</div>`;
                        if (fbApi.messages && fbApi.messages.length > 0) {
                            details += `<div><strong>Mensaje FB:</strong> ${fbApi.messages.join(', ')}</div>`;
                        }
                    }

                    showNotification('✅ Mensaje registrado y enviado a Facebook', 'success', details);
                    setTimeout(() => window.location.reload(), 2000);
                } else {
                    showNotification('❌ ' + (data.error || 'Error al registrar mensaje'), 'error');
                }
            } catch (error) {
                showNotification('❌ Error de conexión', 'error');
            }
            });
        }

        // Manejar formulario de compra
        const purchaseForm = document.getElementById('purchaseForm');
        if (purchaseForm) {
            purchaseForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Validar antes de enviar
            const eventId = document.getElementById('purchaseEventId').value.trim();
            const value = document.getElementById('purchaseValue').value;
            const currency = document.getElementById('purchaseCurrency').value;

            const eventIdError = validateEventId(eventId);
            const valueError = validatePurchaseValue(value);

            if (eventIdError) {
                showFieldError('purchaseEventId', 'purchaseEventIdError', eventIdError);
                return;
            }

            if (valueError) {
                showFieldError('purchaseValue', 'purchaseValueError', valueError);
                return;
            }

            try{
                const response = await fetch(`/api/events/${eventId}/purchase`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ value: parseFloat(value) || 0, currency })
                });

                const data = await response.json();

                if (data.success) {
                    const fbApi = data.facebook_api;
                    let details = `
                        <div><strong>Event ID:</strong> ${eventId.substring(0, 12)}...</div>
                        <div><strong>Evento:</strong> Purchase (Compra)</div>
                    `;

                    if (value) {
                        details += `<div><strong>Valor:</strong> ${currency} ${value}</div>`;
                    }

                    if (fbApi && fbApi.success) {
                        details += `<div><strong>✅ Facebook:</strong> ${fbApi.events_received || 1} evento(s) recibido(s)</div>`;
                        if (fbApi.messages && fbApi.messages.length > 0) {
                            details += `<div><strong>Mensaje FB:</strong> ${fbApi.messages.join(', ')}</div>`;
                        }
                    }

                    showNotification('✅ Compra registrada y enviada a Facebook', 'success', details);
                    setTimeout(() => window.location.reload(), 2000);
                } else {
                    showNotification('❌ ' + (data.error || 'Error al registrar compra'), 'error');
                }
            } catch (error) {
                showNotification('❌ Error de conexión', 'error');
            }
            });
        }

        // ============================================
        // NUEVAS FUNCIONALIDADES
        // ============================================

        // Variables globales para almacenar todos los eventos
        const allEvents = JSON.parse('<%- JSON.stringify(events || []) %>');
        let filteredEvents = Array.isArray(allEvents) ? [...allEvents] : [];
        let conversionChart = null;

        // Inicializar filtros de campaña (debe estar después de declarar allEvents)
        populateCampaignFilter();

        // ============================================
        // 1. EXPORTAR A EXCEL
        // ============================================

        function exportToExcel() {
            // Crear contenido CSV
            let csv = 'Event ID,Fecha/Hora,IP Cliente,Campaña,fbclid,Click WhatsApp,Mensaje,Compra,Valor Compra\n';

            filteredEvents.forEach(event => {
                const fecha = new Date(event.created_at).toLocaleString('es-AR', { timeZone: 'America/Argentina/Buenos_Aires' });
                const ip = event.client_ip || 'N/A';
                const campaign = (event.attribution && event.attribution.utm_campaign) || '-';
                const fbclid = (event.attribution && event.attribution.fbclid) || '-';
                const click = event.whatsapp_clicked ? 'Sí' : 'No';
                const mensaje = event.has_message ? 'Sí' : 'No';
                const compra = event.has_purchase ? 'Sí' : 'No';
                const valor = event.purchase_value || 0;

                csv += `"${event.event_id}","${fecha}","${ip}","${campaign}","${fbclid}","${click}","${mensaje}","${compra}","${valor}"\n`;
            });

            // Descargar archivo
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `eventos_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            showNotification('✅ Archivo Excel descargado', 'success');
        }

        // ============================================
        // 2. FILTROS POR FECHA
        // ============================================

        function filterByDate() {
            const filter = document.getElementById('dateFilter').value;
            const customDateRange = document.getElementById('customDateRange');

            // Mostrar/ocultar rango personalizado
            if (filter === 'custom') {
                customDateRange.style.display = 'flex';
                return;
            } else {
                customDateRange.style.display = 'none';
            }

            const now = new Date();
            let startDate = new Date(0); // Inicio de los tiempos

            if (filter === 'today') {
                startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
            } else if (filter === 'yesterday') {
                const yesterday = new Date(now);
                yesterday.setDate(yesterday.getDate() - 1);
                startDate = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
                const endDate = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 23, 59, 59);
                filterEvents(startDate, endDate);
                return;
            } else if (filter === 'week') {
                startDate = new Date(now);
                startDate.setDate(startDate.getDate() - 7);
            } else if (filter === 'month') {
                startDate = new Date(now);
                startDate.setMonth(startDate.getMonth() - 1);
            }

            filterEvents(startDate, new Date());
        }

        function filterByCustomRange() {
            const startInput = document.getElementById('startDate').value;
            const endInput = document.getElementById('endDate').value;

            if (!startInput || !endInput) return;

            const startDate = new Date(startInput);
            const endDate = new Date(endInput);
            endDate.setHours(23, 59, 59);

            filterEvents(startDate, endDate);
        }

        function filterEvents(startDate, endDate) {
            filteredEvents = allEvents.filter(event => {
                const eventDate = new Date(event.created_at);
                return eventDate >= startDate && eventDate <= endDate;
            });

            // Actualizar tabla
            updateTable();

            // Actualizar gráfico
            updateChart();

            showNotification(`✅ Mostrando ${filteredEvents.length} eventos`, 'success');
        }

        // ============================================
        // NUEVOS FILTROS DE FECHA ESTILO FACEBOOK ADS
        // ============================================

        function applyDateFilter() {
            const filter = document.getElementById('dateRangeFilter').value;
            const customDateRange = document.getElementById('customDateRangeNew');

            // Mostrar/ocultar rango personalizado
            if (filter === 'custom') {
                customDateRange.style.display = 'flex';

                // Si ya hay fechas seleccionadas, aplicar filtro
                const startInput = document.getElementById('startDateNew').value;
                const endInput = document.getElementById('endDateNew').value;

                if (startInput && endInput) {
                    applyCustomDateRange();
                }
                return;
            } else {
                customDateRange.style.display = 'none';
            }

            const now = new Date();
            let startDate, endDate;

            switch(filter) {
                case 'all':
                    startDate = new Date(0); // Inicio de los tiempos
                    endDate = new Date();
                    break;

                case 'today':
                    startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
                    endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                    break;

                case 'yesterday':
                    const yesterday = new Date(now);
                    yesterday.setDate(yesterday.getDate() - 1);
                    startDate = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 0, 0, 0);
                    endDate = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 23, 59, 59);
                    break;

                case 'last7':
                    startDate = new Date(now);
                    startDate.setDate(startDate.getDate() - 7);
                    startDate.setHours(0, 0, 0, 0);
                    endDate = new Date();
                    break;

                case 'last30':
                    startDate = new Date(now);
                    startDate.setDate(startDate.getDate() - 30);
                    startDate.setHours(0, 0, 0, 0);
                    endDate = new Date();
                    break;

                case 'last90':
                    startDate = new Date(now);
                    startDate.setDate(startDate.getDate() - 90);
                    startDate.setHours(0, 0, 0, 0);
                    endDate = new Date();
                    break;

                case 'thisWeek':
                    const dayOfWeek = now.getDay();
                    const diff = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Lunes como inicio
                    startDate = new Date(now);
                    startDate.setDate(startDate.getDate() - diff);
                    startDate.setHours(0, 0, 0, 0);
                    endDate = new Date();
                    break;

                case 'lastWeek':
                    const lastWeekEnd = new Date(now);
                    const currentDayOfWeek = now.getDay();
                    const daysToLastSunday = currentDayOfWeek === 0 ? 7 : currentDayOfWeek;
                    lastWeekEnd.setDate(lastWeekEnd.getDate() - daysToLastSunday);
                    lastWeekEnd.setHours(23, 59, 59, 999);

                    startDate = new Date(lastWeekEnd);
                    startDate.setDate(startDate.getDate() - 6);
                    startDate.setHours(0, 0, 0, 0);

                    endDate = lastWeekEnd;
                    break;

                case 'thisMonth':
                    startDate = new Date(now.getFullYear(), now.getMonth(), 1, 0, 0, 0);
                    endDate = new Date();
                    break;

                case 'lastMonth':
                    startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1, 0, 0, 0);
                    endDate = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59);
                    break;

                default:
                    startDate = new Date(0);
                    endDate = new Date();
            }

            applyDateRangeFilter(startDate, endDate);
        }

        function applyCustomDateRange() {
            const startInput = document.getElementById('startDateNew').value;
            const endInput = document.getElementById('endDateNew').value;

            if (!startInput || !endInput) {
                showNotification('⚠️ Selecciona ambas fechas', 'warning');
                return;
            }

            const startDate = new Date(startInput);
            startDate.setHours(0, 0, 0, 0);

            const endDate = new Date(endInput);
            endDate.setHours(23, 59, 59, 999);

            if (startDate > endDate) {
                showNotification('⚠️ La fecha inicial debe ser anterior a la fecha final', 'warning');
                return;
            }

            applyDateRangeFilter(startDate, endDate);
        }

        function applyDateRangeFilter(startDate, endDate) {
            // Filtrar eventos por rango de fechas
            filteredEvents = allEvents.filter(event => {
                const eventDate = new Date(event.created_at);
                return eventDate >= startDate && eventDate <= endDate;
            });

            // Recalcular estadísticas
            const stats = calculateFilteredStats(filteredEvents);

            // Actualizar las tarjetas de estadísticas
            updateStatsCards(stats);

            // Actualizar tabla
            updateTable();

            // Actualizar gráfico
            updateChart();

            // Mostrar notificación
            const rangeText = `${startDate.toLocaleDateString('es-AR')} - ${endDate.toLocaleDateString('es-AR')}`;
            showNotification(`✅ Mostrando ${filteredEvents.length} eventos (${rangeText})`, 'success');
        }

        function calculateFilteredStats(events) {
            const clickedEvents = events.filter(e => e.whatsapp_clicked === true);
            const messagesCount = events.filter(e => e.has_message === true).length;
            const purchasesCount = events.filter(e => e.has_purchase === true).length;

            const clickToMessage = clickedEvents.length > 0
                ? ((messagesCount / clickedEvents.length) * 100).toFixed(2)
                : '0.00';

            const messageToPurchase = messagesCount > 0
                ? ((purchasesCount / messagesCount) * 100).toFixed(2)
                : '0.00';

            const clickToPurchase = clickedEvents.length > 0
                ? ((purchasesCount / clickedEvents.length) * 100).toFixed(2)
                : '0.00';

            return {
                total_clicks: clickedEvents.length,
                total_messages: messagesCount,
                total_purchases: purchasesCount,
                conversion_click_to_message: clickToMessage,
                conversion_message_to_purchase: messageToPurchase,
                conversion_click_to_purchase: clickToPurchase
            };
        }

        function updateStatsCards(stats) {
            // Actualizar las tarjetas de estadísticas
            const statsSection = document.getElementById('statsSection');
            if (!statsSection) return;

            const statCards = statsSection.querySelectorAll('.stat-card');

            // Actualizar Clicks totales
            if (statCards[0]) {
                statCards[0].querySelector('.stat-value').textContent = stats.total_clicks;
            }

            // Actualizar Mensajes recibidos
            if (statCards[1]) {
                statCards[1].querySelector('.stat-value').textContent = stats.total_messages;
            }

            // Actualizar Compras realizadas
            if (statCards[2]) {
                statCards[2].querySelector('.stat-value').textContent = stats.total_purchases;
            }

            // Actualizar Conversión total
            if (statCards[3]) {
                statCards[3].querySelector('.stat-value').textContent = stats.conversion_click_to_purchase + '%';
            }

            // Actualizar métricas de conversión
            const metricsGrid = document.querySelector('.conversion-metrics .metrics-grid');
            if (metricsGrid) {
                const metrics = metricsGrid.querySelectorAll('.metric-value');
                if (metrics[0]) metrics[0].textContent = stats.conversion_click_to_message + '%';
                if (metrics[1]) metrics[1].textContent = stats.conversion_message_to_purchase + '%';
            }
        }

        function resetFilters() {
            // Resetear el selector a "Todo el tiempo"
            document.getElementById('dateRangeFilter').value = 'all';

            // Ocultar rango personalizado
            document.getElementById('customDateRangeNew').style.display = 'none';

            // Limpiar inputs de fecha
            document.getElementById('startDateNew').value = '';
            document.getElementById('endDateNew').value = '';

            // Recargar la página para mostrar todos los datos sin filtro
            window.location.reload();
        }

        function updateTable() {
            const tableRows = document.querySelectorAll('.event-row');
            const allEventIds = allEvents.map(e => e.event_id);
            const filteredEventIds = new Set(filteredEvents.map(e => e.event_id));

            tableRows.forEach(row => {
                const eventIdElement = row.querySelector('.event-id');
                const fullEventId = eventIdElement ? eventIdElement.getAttribute('title') : '';

                if (filteredEventIds.has(fullEventId)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // ============================================
        // 3. GRÁFICO DE CONVERSIONES
        // ============================================

        function updateChart() {
            console.log('=== INICIO updateChart() ===');
            console.log('Chart disponible?', typeof Chart !== 'undefined');
            console.log('filteredEvents:', filteredEvents ? filteredEvents.length : 'undefined');

            try {
                const ctx = document.getElementById('conversionsChart');
                const loadingMsg = document.getElementById('chartLoadingMessage');
                const errorMsg = document.getElementById('chartErrorMessage');

                if (!ctx) {
                    console.error('❌ Canvas conversionsChart no encontrado');
                    if (errorMsg) errorMsg.style.display = 'block';
                    if (loadingMsg) loadingMsg.style.display = 'none';
                    return;
                }

                if (typeof Chart === 'undefined') {
                    console.error('❌ Chart.js no está cargado');
                    if (errorMsg) {
                        errorMsg.style.display = 'block';
                        errorMsg.querySelector('p').textContent = 'Chart.js no se ha cargado. Recarga la página.';
                    }
                    if (loadingMsg) loadingMsg.style.display = 'none';
                    return;
                }

                console.log('✅ Canvas y Chart.js encontrados');
                console.log('Procesando', filteredEvents.length, 'eventos');

                // Agrupar eventos por día
                const eventsByDay = {};

            filteredEvents.forEach(event => {
                const date = new Date(event.created_at);
                const dayKey = date.toISOString().split('T')[0];

                if (!eventsByDay[dayKey]) {
                    eventsByDay[dayKey] = {
                        clicks: 0,
                        messages: 0,
                        purchases: 0
                    };
                }

                if (event.whatsapp_clicked) eventsByDay[dayKey].clicks++;
                if (event.has_message) eventsByDay[dayKey].messages++;
                if (event.has_purchase) eventsByDay[dayKey].purchases++;
            });

            // Ordenar por fecha
            const sortedDays = Object.keys(eventsByDay).sort();

            console.log('Días con eventos:', sortedDays.length);

            // Preparar datos para el gráfico
            const labels = sortedDays.map(day => {
                const date = new Date(day);
                return date.toLocaleDateString('es-AR', { day: '2-digit', month: '2-digit' });
            });

            const clicksData = sortedDays.map(day => eventsByDay[day].clicks);
            const messagesData = sortedDays.map(day => eventsByDay[day].messages);
            const purchasesData = sortedDays.map(day => eventsByDay[day].purchases);

            console.log('Labels:', labels);
            console.log('Clicks:', clicksData);
            console.log('Mensajes:', messagesData);
            console.log('Compras:', purchasesData);

            // Destruir gráfico anterior si existe
            if (conversionChart) {
                conversionChart.destroy();
                console.log('Gráfico anterior destruido');
            }

            // Crear nuevo gráfico MEJORADO
            conversionChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Clicks en WhatsApp',
                            data: clicksData,
                            borderColor: '#3b82f6',
                            backgroundColor: (context) => {
                                const bgGradient = context.chart.ctx.createLinearGradient(0, 0, 0, 300);
                                bgGradient.addColorStop(0, 'rgba(59, 130, 246, 0.3)');
                                bgGradient.addColorStop(1, 'rgba(59, 130, 246, 0.01)');
                                return bgGradient;
                            },
                            borderWidth: 3,
                            tension: 0.4,
                            fill: true,
                            pointRadius: 5,
                            pointHoverRadius: 8,
                            pointBackgroundColor: '#3b82f6',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2,
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: '#3b82f6',
                            pointHoverBorderWidth: 3
                        },
                        {
                            label: 'Mensajes',
                            data: messagesData,
                            borderColor: '#10b981',
                            backgroundColor: (context) => {
                                const bgGradient = context.chart.ctx.createLinearGradient(0, 0, 0, 300);
                                bgGradient.addColorStop(0, 'rgba(16, 185, 129, 0.3)');
                                bgGradient.addColorStop(1, 'rgba(16, 185, 129, 0.01)');
                                return bgGradient;
                            },
                            borderWidth: 3,
                            tension: 0.4,
                            fill: true,
                            pointRadius: 5,
                            pointHoverRadius: 8,
                            pointBackgroundColor: '#10b981',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2,
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: '#10b981',
                            pointHoverBorderWidth: 3
                        },
                        {
                            label: 'Compras',
                            data: purchasesData,
                            borderColor: '#f59e0b',
                            backgroundColor: (context) => {
                                const bgGradient = context.chart.ctx.createLinearGradient(0, 0, 0, 300);
                                bgGradient.addColorStop(0, 'rgba(245, 158, 11, 0.3)');
                                bgGradient.addColorStop(1, 'rgba(245, 158, 11, 0.01)');
                                return bgGradient;
                            },
                            borderWidth: 3,
                            tension: 0.4,
                            fill: true,
                            pointRadius: 5,
                            pointHoverRadius: 8,
                            pointBackgroundColor: '#f59e0b',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2,
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: '#f59e0b',
                            pointHoverBorderWidth: 3
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                color: '#e2e8f0',
                                font: {
                                    size: 14,
                                    weight: '600',
                                    family: "'Inter', 'SF Pro Display', sans-serif"
                                },
                                padding: 20,
                                usePointStyle: true,
                                pointStyle: 'circle'
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            backgroundColor: 'rgba(15, 23, 42, 0.95)',
                            titleColor: '#e2e8f0',
                            bodyColor: '#cbd5e1',
                            borderColor: 'rgba(59, 130, 246, 0.3)',
                            borderWidth: 1,
                            padding: 16,
                            displayColors: true,
                            bodyFont: {
                                size: 13,
                                weight: '500'
                            },
                            titleFont: {
                                size: 14,
                                weight: '700'
                            },
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    label += context.parsed.y;
                                    return label;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: '#cbd5e1',
                                font: {
                                    size: 12,
                                    weight: '500'
                                },
                                stepSize: 1,
                                padding: 12
                            },
                            grid: {
                                color: 'rgba(203, 213, 225, 0.08)',
                                lineWidth: 1
                            },
                            border: {
                                display: false
                            }
                        },
                        x: {
                            ticks: {
                                color: '#cbd5e1',
                                font: {
                                    size: 12,
                                    weight: '500'
                                },
                                padding: 12
                            },
                            grid: {
                                color: 'rgba(203, 213, 225, 0.08)',
                                lineWidth: 1
                            },
                            border: {
                                display: false
                            }
                        }
                    },
                    animation: {
                        duration: 1500,
                        easing: 'easeInOutQuart'
                    }
                }
            });

                console.log('✅ Gráfico creado exitosamente');

                // Ocultar mensaje de carga
                if (loadingMsg) {
                    loadingMsg.style.display = 'none';
                    console.log('✅ Mensaje de carga ocultado');
                }

            } catch (error) {
                console.error('❌ ERROR en updateChart():', error);

                if (loadingMsg) loadingMsg.style.display = 'none';
                if (errorMsg) {
                    errorMsg.style.display = 'block';
                    errorMsg.querySelector('p').textContent = 'Error: ' + error.message;
                }
            }
        }

        // ============================================
        // PAGINACIÓN
        // ============================================

        let currentPage = 1;
        let pageSize = 20;
        let paginatedEvents = [];

        function renderTable() {
            const tbody = document.querySelector('table tbody');
            if (!tbody) return;

            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = startIndex + pageSize;
            paginatedEvents = filteredEvents.slice(startIndex, endIndex);

            // Mostrar/ocultar controles si hay más de 20 eventos
            const paginationControls = document.getElementById('paginationControls');
            if (paginationControls) {
                paginationControls.style.display = filteredEvents.length > 20 ? 'flex' : 'none';
            }

            // Actualizar info de paginación
            document.getElementById('totalEvents').textContent = filteredEvents.length;
            document.getElementById('showingFrom').textContent = filteredEvents.length > 0 ? startIndex + 1 : 0;
            document.getElementById('showingTo').textContent = Math.min(endIndex, filteredEvents.length);

            const totalPages = Math.ceil(filteredEvents.length / pageSize) || 1;
            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = totalPages;

            // Habilitar/deshabilitar botones
            document.getElementById('prevBtn').disabled = currentPage === 1;
            document.getElementById('nextBtn').disabled = currentPage >= totalPages;
        }

        function changePage(direction) {
            const totalPages = Math.ceil(filteredEvents.length / pageSize);

            if (direction === 'prev' && currentPage > 1) {
                currentPage--;
            } else if (direction === 'next' && currentPage < totalPages) {
                currentPage++;
            }

            renderTable();
        }

        function changePageSize() {
            pageSize = parseInt(document.getElementById('pageSize').value);
            currentPage = 1; // Resetear a primera página
            renderTable();
        }

        // FUNCIONES PARA MODAL DE GASTOS
        function openSpendModal() {
            document.getElementById('spendModal').style.display = 'flex';
        }

        function closeSpendModal() {
            document.getElementById('spendModal').style.display = 'none';
            document.getElementById('spendForm').reset();
        }

        // Cerrar modal al hacer click fuera de él
        window.onclick = function(event) {
            const modal = document.getElementById('spendModal');
            if (event.target === modal) {
                closeSpendModal();
            }
        };

        // Manejar envío de formulario de gastos
        const spendForm = document.getElementById('spendForm');
        if (spendForm) {
            spendForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const campaign = document.getElementById('campaignName').value;
            const amount = parseFloat(document.getElementById('campaignAmount').value);

            try {
                const response = await fetch('/api/campaigns/spend', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ campaign, amount, currency: 'USD' })
                });

                const result = await response.json();

                if (result.success) {
                    alert(`Gasto actualizado para campaña "${campaign}": $${amount}`);
                    closeSpendModal();
                    // Recargar página para mostrar nuevo ROAS
                    location.reload();
                } else {
                    alert('Error: ' + (result.error || 'No se pudo actualizar el gasto'));
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error al guardar el gasto');
            }
            });
        }

        // Inicializar gráfico al cargar la página
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM Cargado');
            console.log('Chart.js disponible:', typeof Chart !== 'undefined');

            renderTable();

            // Asegurar que Chart.js esté cargado antes de crear el gráfico
            if (typeof Chart !== 'undefined') {
                console.log('Llamando a updateChart()');
                updateChart();
            } else {
                console.error('Chart.js no está cargado');
            }

            loadNotes();
            loadTasks();

            // NO aplicar filtro automáticamente - dejar que el usuario lo seleccione
            // applyDateFilter();
        });

        // ===== FUNCIONES DEL SIDEBAR =====
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const floatingBtn = document.getElementById('sidebarFloatingBtn');
            const mainContent = document.getElementById('mainContent');

            if (sidebar.classList.contains('collapsed')) {
                sidebar.classList.remove('collapsed');
                floatingBtn.style.display = 'none';
                mainContent.style.marginLeft = '280px';
            } else {
                sidebar.classList.add('collapsed');
                floatingBtn.style.display = 'flex';
                mainContent.style.marginLeft = '0';
            }
        }

        function showTool(toolName) {
            console.log('🔧 showTool called with:', toolName);

            // Ocultar todos los paneles
            document.querySelectorAll('.tool-panel').forEach(panel => {
                panel.style.display = 'none';
            });

            // Desactivar todos los items del menú
            document.querySelectorAll('.menu-item').forEach(item => {
                item.classList.remove('active');
            });

            // Mostrar el panel correspondiente
            if (toolName === 'dashboard') {
                console.log('📊 Mostrando dashboard (ocultando todos los paneles)');
                // No hacer nada, solo ocultar paneles
            } else if (toolName === 'notes') {
                const panel = document.getElementById('notesPanel');
                console.log('📝 Mostrando panel de notas, elemento encontrado:', panel);
                if (panel) {
                    panel.style.display = 'block';
                    console.log('✅ Panel de notas display:', panel.style.display);
                } else {
                    console.error('❌ No se encontró el panel notesPanel');
                }
            } else if (toolName === 'calculator') {
                const panel = document.getElementById('calculatorPanel');
                console.log('🧮 Mostrando calculadora, elemento encontrado:', panel);
                if (panel) {
                    panel.style.display = 'block';
                    console.log('✅ Panel calculadora display:', panel.style.display);
                } else {
                    console.error('❌ No se encontró el panel calculatorPanel');
                }
            } else if (toolName === 'tasks') {
                const panel = document.getElementById('tasksPanel');
                console.log('✓ Mostrando tareas, elemento encontrado:', panel);
                if (panel) {
                    panel.style.display = 'block';
                    console.log('✅ Panel tareas display:', panel.style.display);
                } else {
                    console.error('❌ No se encontró el panel tasksPanel');
                }
            } else if (toolName === 'settings') {
                const panel = document.getElementById('settingsPanel');
                console.log('⚙️ Mostrando settings, elemento encontrado:', panel);
                if (panel) {
                    panel.style.display = 'block';
                } else {
                    console.error('❌ No se encontró el panel settingsPanel');
                }
            }

            // Activar el item del menú
            const activeItem = document.querySelector(`[data-tool="${toolName}"]`);
            console.log('🎯 Activando menu item:', activeItem);
            if (activeItem) {
                activeItem.classList.add('active');
            }
        }

        // ===== FUNCIONES DE NOTAS =====
        function saveNotes() {
            const notes = document.getElementById('notesTextarea').value;
            localStorage.setItem('crmNotes', notes);
            alert('Notas guardadas correctamente');
        }

        function loadNotes() {
            const notes = localStorage.getItem('crmNotes') || '';
            if (document.getElementById('notesTextarea')) {
                document.getElementById('notesTextarea').value = notes;
            }
        }

        function clearNotes() {
            if (confirm('¿Estás seguro de que quieres borrar todas las notas?')) {
                document.getElementById('notesTextarea').value = '';
                localStorage.removeItem('crmNotes');
                alert('Notas borradas');
            }
        }

        // ===== FUNCIONES DE CALCULADORA =====

        // Variables para calculadora normal
        let currentCalcValue = '0';
        let previousCalcValue = null;
        let currentOperator = null;
        let shouldResetDisplay = false;

        function updateCalcDisplay() {
            document.getElementById('calcDisplay').textContent = currentCalcValue;
        }

        function appendNumber(num) {
            if (shouldResetDisplay) {
                currentCalcValue = num;
                shouldResetDisplay = false;
            } else {
                if (currentCalcValue === '0' && num !== '.') {
                    currentCalcValue = num;
                } else if (num === '.' && currentCalcValue.includes('.')) {
                    return;
                } else {
                    currentCalcValue += num;
                }
            }
            updateCalcDisplay();
        }

        function appendOperator(operator) {
            if (currentOperator !== null && !shouldResetDisplay) {
                calculateResult();
            }
            previousCalcValue = currentCalcValue;
            currentOperator = operator;
            shouldResetDisplay = true;
        }

        function calculateResult() {
            if (currentOperator === null || previousCalcValue === null) return;

            const prev = parseFloat(previousCalcValue);
            const current = parseFloat(currentCalcValue);
            let result = 0;

            switch (currentOperator) {
                case '+':
                    result = prev + current;
                    break;
                case '-':
                    result = prev - current;
                    break;
                case '×':
                    result = prev * current;
                    break;
                case '÷':
                    if (current === 0) {
                        currentCalcValue = 'Error';
                        updateCalcDisplay();
                        setTimeout(() => {
                            clearCalc();
                        }, 1500);
                        return;
                    }
                    result = prev / current;
                    break;
            }

            currentCalcValue = result.toString();
            if (currentCalcValue.includes('.') && currentCalcValue.split('.')[1].length > 8) {
                currentCalcValue = parseFloat(currentCalcValue).toFixed(8);
            }
            currentOperator = null;
            previousCalcValue = null;
            shouldResetDisplay = true;
            updateCalcDisplay();
        }

        function clearCalc() {
            currentCalcValue = '0';
            previousCalcValue = null;
            currentOperator = null;
            shouldResetDisplay = false;
            updateCalcDisplay();
        }

        function deleteCalc() {
            if (currentCalcValue.length > 1) {
                currentCalcValue = currentCalcValue.slice(0, -1);
            } else {
                currentCalcValue = '0';
            }
            updateCalcDisplay();
        }

        function percentCalc() {
            const current = parseFloat(currentCalcValue);
            currentCalcValue = (current / 100).toString();
            updateCalcDisplay();
        }

        function calculateROAS() {
            const revenue = parseFloat(document.getElementById('calcRevenue').value) || 0;
            const spend = parseFloat(document.getElementById('calcSpend').value) || 0;

            if (spend === 0) {
                document.getElementById('roasResult').innerHTML = '<span style="color: var(--accent-red);">El gasto no puede ser 0</span>';
                return;
            }

            const roas = (revenue / spend).toFixed(2);
            const roasClass = parseFloat(roas) >= 2 ? 'var(--accent-green)' : parseFloat(roas) >= 1 ? 'var(--accent-yellow)' : 'var(--accent-red)';

            document.getElementById('roasResult').innerHTML = `
                <div style="margin-top: 15px; padding: 15px; background: var(--glass-bg); border-radius: 12px; border: 1px solid var(--glass-border);">
                    <strong>ROAS:</strong> <span style="font-size: 24px; color: ${roasClass};">${roas}x</span>
                    <p style="margin-top: 5px; color: var(--text-muted); font-size: 14px;">Por cada $1 gastado, generas $${roas}</p>
                </div>
            `;
        }

        function calculateMargin() {
            const revenue = parseFloat(document.getElementById('calcMarginRevenue').value) || 0;
            const spend = parseFloat(document.getElementById('calcMarginSpend').value) || 0;

            const margin = revenue - spend;
            const marginPercent = revenue > 0 ? ((margin / revenue) * 100).toFixed(2) : 0;
            const marginClass = margin > 0 ? 'var(--accent-green)' : 'var(--accent-red)';

            document.getElementById('marginResult').innerHTML = `
                <div style="margin-top: 15px; padding: 15px; background: var(--glass-bg); border-radius: 12px; border: 1px solid var(--glass-border);">
                    <strong>Margen:</strong> <span style="font-size: 24px; color: ${marginClass};">$${margin.toFixed(2)}</span>
                    <p style="margin-top: 5px; color: var(--text-muted); font-size: 14px;">Margen: ${marginPercent}%</p>
                </div>
            `;
        }

        // ===== FUNCIONES DE TAREAS =====
        let tasks = [];

        function loadTasks() {
            const saved = localStorage.getItem('crmTasks');
            if (saved) {
                tasks = JSON.parse(saved);
                renderTasks();
            }
        }

        function saveTasks() {
            localStorage.setItem('crmTasks', JSON.stringify(tasks));
        }

        function addTask() {
            const input = document.getElementById('taskInput');
            const text = input.value.trim();

            if (text) {
                tasks.push({
                    id: Date.now(),
                    text: text,
                    done: false
                });
                input.value = '';
                saveTasks();
                renderTasks();
            }
        }

        function toggleTask(id) {
            const task = tasks.find(t => t.id === id);
            if (task) {
                task.done = !task.done;
                saveTasks();
                renderTasks();
            }
        }

        function deleteTask(id) {
            tasks = tasks.filter(t => t.id !== id);
            saveTasks();
            renderTasks();
        }

        function renderTasks() {
            const taskList = document.getElementById('taskList');
            if (!taskList) return;

            if (tasks.length === 0) {
                taskList.innerHTML = '<li class="empty-tasks">No hay tareas. Agrega una nueva tarea arriba.</li>';
                return;
            }

            taskList.innerHTML = tasks.map(task => `
                <li class="task-item ${task.done ? 'done' : ''}">
                    <input type="checkbox" ${task.done ? 'checked' : ''} onchange="toggleTask(${task.id})" class="task-checkbox">
                    <span class="task-text">${task.text}</span>
                    <button onclick="deleteTask(${task.id})" class="btn-delete-task">🗑️</button>
                </li>
            `).join('');
        }

        // ===== FUNCIONES DE CONFIGURACIÓN =====
        async function saveSettings() {
            const pixelId = document.getElementById('settingPixelId').value.trim();
            const accessToken = document.getElementById('settingAccessToken').value.trim();
            const messageDiv = document.getElementById('settingsMessage');

            // Validar que ambos campos estén llenos
            if (!pixelId || !accessToken) {
                messageDiv.style.display = 'block';
                messageDiv.style.background = 'rgba(239, 68, 68, 0.1)';
                messageDiv.style.border = '1px solid var(--accent-red)';
                messageDiv.style.color = 'var(--accent-red)';
                messageDiv.style.padding = '15px';
                messageDiv.style.borderRadius = '10px';
                messageDiv.innerHTML = '❌ Por favor completa ambos campos (Pixel ID y Access Token)';
                // Hacer scroll al mensaje
                messageDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
                return;
            }

            // Mostrar mensaje de cargando
            messageDiv.style.display = 'block';
            messageDiv.style.background = 'rgba(59, 130, 246, 0.1)';
            messageDiv.style.border = '1px solid var(--accent-blue)';
            messageDiv.style.color = 'var(--accent-blue)';
            messageDiv.style.padding = '15px';
            messageDiv.style.borderRadius = '10px';
            messageDiv.innerHTML = '⏳ Guardando configuración...';
            // Hacer scroll al mensaje
            messageDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });

            try {
                const response = await fetch('/api/settings/facebook', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        pixelId: pixelId,
                        accessToken: accessToken
                    })
                });

                const result = await response.json();

                if (result.success) {
                    messageDiv.style.background = 'rgba(16, 185, 129, 0.1)';
                    messageDiv.style.border = '1px solid var(--accent-green)';
                    messageDiv.style.color = 'var(--accent-green)';
                    messageDiv.innerHTML = '✅ Configuración guardada correctamente. Los cambios se aplicaron inmediatamente.';

                    // Hacer scroll al mensaje
                    messageDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });

                    // Actualizar el display de configuración actual
                    document.getElementById('currentPixelId').textContent = pixelId;

                    // Ocultar mensaje después de 5 segundos
                    setTimeout(() => {
                        messageDiv.style.display = 'none';
                    }, 5000);
                } else {
                    messageDiv.style.background = 'rgba(239, 68, 68, 0.1)';
                    messageDiv.style.border = '1px solid var(--accent-red)';
                    messageDiv.style.color = 'var(--accent-red)';
                    messageDiv.innerHTML = '❌ Error: ' + (result.error || 'No se pudo guardar la configuración');
                    // Hacer scroll al mensaje
                    messageDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            } catch (error) {
                console.error('Error:', error);
                messageDiv.style.background = 'rgba(239, 68, 68, 0.1)';
                messageDiv.style.border = '1px solid var(--accent-red)';
                messageDiv.style.color = 'var(--accent-red)';
                messageDiv.innerHTML = '❌ Error al guardar la configuración. Por favor intenta de nuevo.';
                // Hacer scroll al mensaje
                messageDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }

        // ===== TOGGLE DARK/LIGHT MODE =====
        function toggleTheme() {
            const currentTheme = document.body.getAttribute('data-theme') || 'dark';
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

            document.body.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);

            // Cambiar el icono del botón
            const themeIcon = document.querySelector('.theme-icon');
            if (themeIcon) {
                themeIcon.textContent = newTheme === 'dark' ? '🌙' : '☀️';
            }

            showNotification(`Tema cambiado a ${newTheme === 'dark' ? 'oscuro' : 'claro'}`, 'success');
        }

        // Cargar tema guardado al iniciar
        function loadSavedTheme() {
            const savedTheme = localStorage.getItem('theme') || 'dark';
            document.body.setAttribute('data-theme', savedTheme);

            const themeIcon = document.querySelector('.theme-icon');
            if (themeIcon) {
                themeIcon.textContent = savedTheme === 'dark' ? '🌙' : '☀️';
            }
        }

        // Cargar tema al inicio
        loadSavedTheme();
    </script>
</body>
</html>
